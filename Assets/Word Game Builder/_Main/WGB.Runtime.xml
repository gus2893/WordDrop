<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>WGB.Runtime</name>
  </assembly>
  <members>
    <member name="T:Thinksquirrel.WordGameBuilder.AsyncTask">
      <summary>
            Represents an asynchronous task.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.AsyncTask.hasEnded">
      <summary>
            Returns true if this task has ended, been skipped, or been aborted.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.AsyncTask.isSucceeded">
      <summary>
            Returns true if this task was successful.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.AsyncTask.isFailed">
      <summary>
            Returns true if this task has failed.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.AsyncTask.Create(System.Action{Thinksquirrel.WordGameBuilder.AsyncTask})">
      <summary>
            Creates a task on a background thread.
            </summary>
      <param name="action">The action to run on a background thread.</param>
      <returns>An object representing the asynchronous task.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.AsyncTask.Dispatch(System.Action{Thinksquirrel.WordGameBuilder.AsyncTask})">
      <summary>
            Dispatches an action onto the main thread.
            </summary>
      <param name="action">The action to run on the main thread.</param>
      <returns>An object representing the asynchronous task.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.AsyncTask.Create(System.Action)">
      <summary>
            Creates a task on a background thread, without tracking task state.
            </summary>
      <param name="action">The action to run on a background thread.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.AsyncTask.Dispatch(System.Action)">
      <summary>
            Dispatches an action onto the main thread, without tracking task state.
            </summary>
      <param name="action">The action to run on the main thread.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.AsyncTask.Abort">
      <summary>
            Abort this task.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.AsyncTask.AbortWait">
      <summary>
            Abort this task, and wait until it has ended.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.AsyncTask.AbortWaitForSeconds(System.Single)">
      <summary>
            Abort this task, and wait until it has ended, or the specified amount of time (in seconds) has passed.
            </summary>
      <param name="seconds">The maximum amount of seconds to wait.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.AsyncTask.Wait">
      <summary>
            Blocks the calling thread until the task has ended.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.AsyncTask.WaitForSeconds(System.Single)">
      <summary>
            Blocks the calling thread until the task has ended, or the specified amount of time (in seconds) has passed.
            </summary>
      <param name="seconds">The maximum amount of seconds to wait.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.AsyncTask.Dispose">
      <summary>
            Disposes this task and waits for completion if it is still running.
            </summary>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Letter">
      <summary>
            Represents a letter.
            </summary>
      <remarks>
            Note that this type is passed by value for performance reasons.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Letter.#ctor(System.String,System.Char,System.Int32)">
      <summary>
            Creates a new letter.
            </summary>
      <param name="text">A human-readable string representing the letter.</param>
      <param name="charValue">A machine-character representing the letter.</param>
      <param name="score">The point value of the letter.</param>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Letter.empty">
      <summary>
            Returns an empty letter.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Letter.character">
      <summary>
            Gets the character associated with the letter.
            </summary>
      <remarks>
            The character is used for lookups into the langauge dictionary.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Letter.hasValue">
      <summary>
            Does the letter have a value?
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Letter.score">
      <summary>
            Gets the score associated with the letter.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Letter.text">
      <summary>
            Gets the text associated with the letter.
            </summary>
      <remarks>
            This is the actual display text for the letter.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Letter.Equals(System.Object)">
      <summary>
            Override for System.Object.Equals.
            </summary>
      <param name="obj">The object to compare this letter with.</param>
      <returns>
        <c>true</c> if the letters are equal, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Letter.GetHashCode">
      <summary>
            Override for System.Object.GetHashCode.
            </summary>
      <returns>
            A hash code of the current letter.
            </returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Letter.Equals(Thinksquirrel.WordGameBuilder.Letter)">
      <summary>
            Tests value-based equality between two letters.
            </summary>
      <remarks>
            Two letters are equal if they have the same text and character, or are both blank.
            </remarks>
      <param name="other">The other letter to compare with this one.</param>
      <returns>
        <c>true</c> if the letters are equal, otherwise <c>false</c>.</returns>
      <returns>A signed number indicating the relative values of this instance and <c>other</c>.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Letter.CompareTo(Thinksquirrel.WordGameBuilder.Letter)">
      <summary>
            Compares this letter to another one, by their human-readable string values and the current culture.
            </summary>
      <remarks>
            Two letters are equal if they have the same text and character, or are both blank.
            </remarks>
      <param name="other">The other letter to compare with this one.</param>
      <returns>A signed number indicating the relative values of this instance and <c>other</c>.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Letter.CompareTo(Thinksquirrel.WordGameBuilder.Letter,System.Globalization.CultureInfo)">
      <summary>
            Compares this letter to another one, by their human-readable string values and the specified culture.
            </summary>
      <remarks>
            Two letters are equal if they have the same text and character, or are both blank.
            </remarks>
      <param name="other">The other letter to compare with this one.</param>
      <param name="culture">The culture to use for the comparison.</param>
      <returns>A signed number indicating the relative values of this instance and <c>other</c>.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Letter.op_Equality(Thinksquirrel.WordGameBuilder.Letter,Thinksquirrel.WordGameBuilder.Letter)">
      <summary>
            Tests value-based equality between two letters.
            </summary>
      <remarks>
            Two letters are equal if they have the same text and character, or are both blank.
            </remarks>
      <param name="a">The first letter to compare.</param>
      <param name="b">The second letter to compare.</param>
      <returns>
        <c>true</c> if the letters are equal, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Letter.op_Inequality(Thinksquirrel.WordGameBuilder.Letter,Thinksquirrel.WordGameBuilder.Letter)">
      <summary>
            Tests value-based non-equality between two letters.
            </summary>
      <remarks>
            Two letters are equal if they have the same text and character, or are both blank.
            </remarks>
      <param name="a">The first letter to compare.</param>
      <param name="b">The second letter to compare.</param>
      <returns>
        <c>true</c> if the letters are NOT equal, otherwise <c>false</c>.</returns>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.SerializableLetter">
      <summary>
            A serialized representation of a letter. Used for Unity components.
            </summary>
      <seealso cref="T:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile" />
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.SerializableLetter.#ctor">
      <summary>
            Creates an empty SerializedLetter.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.SerializableLetter.#ctor(Thinksquirrel.WordGameBuilder.Letter)">
      <summary>
            Creates a SerializableLetter from a Letter struct.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.SerializableLetter.#ctor(Thinksquirrel.WordGameBuilder.SerializableLetter)">
      <summary>
            Creates a SerializableLetter from another SerializableLetter.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.SerializableLetter.text">
      <summary>
            The text associated with the letter.
            </summary>
      <remarks>
            This is the actual display text for the letter.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.SerializableLetter.character">
      <summary>
            The character associated with the letter.
            </summary>
      <remarks>
            The character is used for lookups into the langauge dictionary.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.SerializableLetter.score">
      <summary>
            The score associated with the letter.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.SerializableLetter.hasValue">
      <summary>
            Does the letter have a value?
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.SerializableLetter.Update(Thinksquirrel.WordGameBuilder.Letter)">
      <summary>
            Updates the SerializableLetter from a Letter struct.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.SerializableLetter.Update(Thinksquirrel.WordGameBuilder.SerializableLetter)">
      <summary>
            Updates the SerializableLetter from another SerializableLetter.
            </summary>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.TaskManager">
      <summary>
            Provides methods for dealing with asynchronous tasks.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.TaskManager.GetActiveTasks">
      <summary>
            Get all currently active tasks.
            </summary>
      <remarks>
            When enumerating through tasks, it is still recommended to check their status, as they may have finished during enumeration.
            </remarks>
      <returns>An enumerable with all active tasks.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.TaskManager.AbortAllTasks">
      <summary>
            Abort all currently running asynchronous tasks.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.TaskManager.AbortAllTasksAndWait">
      <summary>
            Abort all currently running asynchronous tasks and wait for completion.
            </summary>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.WGBBase">
      <summary>
            The base class for all Word Game Builder components.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WGBBase.userData">
      <summary>
            Additional user data associated with this object. This is unused by default.
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.IMonoBehaviour.userData">IMonoBehaviour</see>.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBBase.InstantiateFromInterface``1(``0)">
      <summary>
            Instantiate a GameObject from interface type T.
            </summary>
      <typeparam name="T">The interface type to instantiate. Must be an IMonoBehaviour.</typeparam>
      <param name="original">The object to instantiate.</param>
      <returns>The instantiated object as an interface.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBBase.InstantiateFromInterface``1(``0,UnityEngine.Vector3,UnityEngine.Quaternion)">
      <summary>
            Instantiate a GameObject from interface type T at the specified position and rotation.
            </summary>
      <typeparam name="T">The interface type to instantiate. Must be an IMonoBehaviour.</typeparam>
      <param name="original">The object to instantiate.</param>
      <param name="position">The position to instantiate the new object at.</param>
      <param name="rotation">The rotation to instantiate the new object at.</param>
      <returns>The instantiated object as an interface.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBBase.FindObjectOfTypeFromInterface``1">
      <summary>
            Finds the first object of interface type T.
            </summary>
      <typeparam name="T">The interface type to find. Must be an IMonoBehaviour.</typeparam>
      <returns>The first found object as an interface. Returns null if no objects were found.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBBase.FindObjectsOfTypeFromInterface``1">
      <summary>
            Finds all objects of interface type T.
            </summary>
      <typeparam name="T">The interface type to find. Must be an IMonoBehaviour.</typeparam>
      <returns>An array of found objects, as an interface. Returns an empty array if no objects were found.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBBase.GetComponentFromInterface``1">
      <summary>
            Gets a component from its interface type.
            </summary>
      <typeparam name="T">
            The interface type of the component. Must be an IMonoBehaviour.
            </typeparam>
      <returns>The found object as an interface. Returns null if no object was found.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBBase.GetComponentsFromInterface``1">
      <summary>
            Gets all components from its interface type.
            </summary>
      <typeparam name="T">
            The interface type of the component. Must be an IMonoBehaviour.
            </typeparam>
      <returns>An array of found objects, as an interface. Returns an empty array if no objects were found.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBBase.GetComponentInChildrenFromInterface``1">
      <summary>
            Gets a component from its interface type, searching through this GameObject and all children.
            </summary>
      <typeparam name="T">
            The interface type of the component. Must be an IMonoBehaviour.
            </typeparam>
      <returns>The found object as an interface. Returns null if no object was found.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBBase.GetComponentsInChildrenFromInterface``1">
      <summary>
            Gets all components from its interface type, searching through this GameObject and all children.
            </summary>
      <typeparam name="T">
            The interface type of the component. Must be an IMonoBehaviour.
            </typeparam>
      <returns>An array of found objects, as an interface. Returns an empty array if no objects were found.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBBase.Log(System.Object,System.String,System.String)">
      <summary>
            Logs a prefixed message.
            </summary>
      <param name="message">The message to log.</param>
      <param name="prefix">The prefix to log with the message.</param>
      <param name="type">An identifier formatted with the prefix.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBBase.LogWarning(System.Object,System.String,System.String)">
      <summary>
            Logs a prefixed warning.
            </summary>
      <param name="message">The message to log.</param>
      <param name="prefix">The prefix to log with the message.</param>
      <param name="type">An identifier formatted with the prefix.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBBase.LogError(System.Object,System.String,System.String)">
      <summary>
            Logs a prefixed erorr.
            </summary>
      <param name="message">The message to log.</param>
      <param name="prefix">The prefix to log with the message.</param>
      <param name="type">An identifier formatted with the prefix.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBBase.LogException(System.Exception)">
      <summary>
            Logs an exception.
            </summary>
      <param name="ex">The exception to log.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBBase.Log(System.Object,System.String,System.String,UnityEngine.Object)">
      <summary>
            Logs a prefixed message, with context.
            </summary>
      <param name="message">The message to log.</param>
      <param name="prefix">The prefix to log with the message.</param>
      <param name="type">An identifier formatted with the prefix.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBBase.LogWarning(System.Object,System.String,System.String,UnityEngine.Object)">
      <summary>
            Logs a prefixed warning, with context.
            </summary>
      <param name="message">The message to log.</param>
      <param name="prefix">The prefix to log with the message.</param>
      <param name="type">An identifier formatted with the prefix.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBBase.LogError(System.Object,System.String,System.String,UnityEngine.Object)">
      <summary>
            Logs a prefixed exception, with context.
            </summary>
      <param name="message">The message to log.</param>
      <param name="prefix">The prefix to log with the message.</param>
      <param name="type">An identifier formatted with the prefix.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBBase.LogException(System.Exception,UnityEngine.Object)">
      <summary>
            Logs an exception, with context.
            </summary>
      <param name="ex">The exception to log.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.WGBEvent">
      <summary>
            A serializable class for event binding.
            </summary>
      <remarks>
            Events can be bound (public MonoBehaviour methods), use SendMessage (GameObject and method name), or use delegates.
            This class supports multicast events, and is safe (it will not throw exceptions for missing delegates or methods).
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBEvent.#ctor(UnityEngine.MonoBehaviour,System.String)">
      <summary>
            Creates an event with a target MonoBehaviour and method name.
            </summary>
      <param name="target">The MonoBehaviour with the method to search for.</param>
      <param name="methodName">The name of the method to search for.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBEvent.#ctor(UnityEngine.GameObject,System.String)">
      <summary>
            Creates an event with a target GameObject and method name (uses SendMessage).
            </summary>
      <param name="target">The GameObject with the method to search for.</param>
      <param name="methodName">The name of the method to search for.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBEvent.#ctor(Thinksquirrel.WordGameBuilder.WGBEventDelegate)">
      <summary>
            Creates an event from a delegate.
            </summary>
      <param name="del">The delegate to search for.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBEvent.#ctor(Thinksquirrel.WordGameBuilder.WGBEventDelegate,System.String)">
      <summary>
            Creates an event from a delegate and an optional name.
            </summary>
      <param name="del">The delegate to search for.</param>
      <param name="name">The name of the delegate to search for.</param>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WGBEvent.target">
      <summary>
            The event target. In the case of multiple events, this is based on the first added value.
            </summary>
      <remarks>
            This value will be null for delegates not associated with a MonoBehaviour.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WGBEvent.targetGameObject">
      <summary>
            The event target's GameObject. In the case of multiple events, this is based on the first added value.
            </summary>
      <remarks>
            This value will be null for delegates not associated with a Component.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WGBEvent.methodName">
      <summary>
            The event method name. In the case of multiple events, this is based on the first added value.
            </summary>
      <remarks>
            This value will be in the form of Type.Name or Type.{delegate} for delegates.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WGBEvent.rawMethodName">
      <summary>
            The event raw method name, without namespace or any other qualifiers. In the case of multiple events, this is based on the first added value.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WGBEvent.isDelegate">
      <summary>
            If true, this event is a delegate. In the case of multiple events, this is based on the first added value.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WGBEvent.currentLanguage">
      <summary>
            Gets the current language. This can only be used during event callbacks, for events invoked with the static Invoke method.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WGBEvent.currentLetterTile">
      <summary>
            Gets the current letter tile. This can only be used during event callbacks, for events invoked with the static Invoke method.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WGBEvent.currentTilePool">
      <summary>
            Gets the current tile pool. This can only be used during event callbacks, for events invoked with the static Invoke method.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WGBEvent.currentWildcardTileManager">
      <summary>
            Gets the current wildcard tile manager. This can only be used during event callbacks, for events invoked with the static Invoke method.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WGBEvent.currentPlayer">
      <summary>
            Gets the current player. This can only be used during event callbacks, for events invoked with the static Invoke method.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WGBEvent.currentAgent">
      <summary>
            Gets the current agent. This can only be used during event callbacks, for events invoked with the static Invoke method.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBEvent.SetDelegate(UnityEngine.MonoBehaviour,System.String)">
      <summary>
            Sets the event with a MonoBehaviour and method name.
            </summary>
      <param name="target">The MonoBehaviour with the method to search for.</param>
      <param name="methodName">The name of the method to search for.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBEvent.SetDelegate(UnityEngine.GameObject,System.String)">
      <summary>
            Sets the event with a GameObject and method name (Uses SendMessage).
            </summary>
      <param name="target">The GameObject with the method to search for.</param>
      <param name="methodName">The name of the method to search for.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBEvent.SetDelegate(Thinksquirrel.WordGameBuilder.WGBEventDelegate)">
      <summary>
            Sets the event with a delegate.
            </summary>
      <param name="del">The delegate to search for.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBEvent.SetDelegate(Thinksquirrel.WordGameBuilder.WGBEventDelegate,System.String)">
      <summary>
            Sets the event with a delegate and an optional name.
            </summary>
      <param name="del">The delegate to search for.</param>
      <param name="name">The name of the delegate to search for.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBEvent.GetDelegate">
      <summary>
            Gets the raw delegate value.
            </summary>
      <returns>A .NET delegate for the event, or null if the delegate has not yet been bound, or SendMessage is being used.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBEvent.GetInvocationList">
      <summary>
            Gets all individual events associated with this object.
            </summary>
      <remarks>
            Events are multicast - multiple events can be associated with a single object. This method gets all individual contained events.
            This allocates a new list.
            </remarks>
      <returns>A list of each event contained in this object.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBEvent.Add(UnityEngine.MonoBehaviour,System.String)">
      <summary>
            Adds a MonoBehaviour and method name to this event.
            </summary>
      <param name="target">The MonoBehaviour with the method to search for.</param>
      <param name="methodName">The name of the method to search for.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBEvent.Add(UnityEngine.GameObject,System.String)">
      <summary>
            Adds a GameObject and method name to this event (Uses SendMessage).
            </summary>
      <param name="target">The GameObject with the method to search for.</param>
      <param name="methodName">The name of the method to search for.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBEvent.Add(Thinksquirrel.WordGameBuilder.WGBEventDelegate)">
      <summary>
            Adds a delegate to this event.
            </summary>
      <param name="del">The delegate to search for.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBEvent.Add(Thinksquirrel.WordGameBuilder.WGBEventDelegate,System.String)">
      <summary>
            Adds a delegate to the event with an optional name.
            </summary>
      <param name="del">The delegate to search for.</param>
      <param name="name">The name of the delegate to search for.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBEvent.Remove(UnityEngine.MonoBehaviour,System.String)">
      <summary>
            Remove the first instance of an event by MonoBehaviour and method name.
            </summary>
      <param name="target">The MonoBehaviour with the method to search for.</param>
      <param name="methodName">The name of the method to search for.</param>
      <returns>
        <c>true</c> if the event was successfully removed, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBEvent.Remove(UnityEngine.GameObject,System.String)">
      <summary>
            Remove the first instance of an event by GameObject and method name.
            </summary>
      <param name="target">The GameObject with the method to search for.</param>
      <param name="methodName">The name of the method to search for.</param>
      <returns>
        <c>true</c> if the event was successfully removed, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBEvent.Remove(Thinksquirrel.WordGameBuilder.WGBEventDelegate)">
      <summary>
            Remove the first instance of an event by a delegate.
            </summary>
      <param name="del">The delegate to search for.</param>
      <returns>
        <c>true</c> if the event was successfully removed, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBEvent.Remove(Thinksquirrel.WordGameBuilder.WGBEventDelegate,System.String)">
      <summary>
            Remove the first instance of an event by a delegate and name.
            </summary>
      <param name="del">The delegate to search for.</param>
      <param name="name">The name of the delegate to search for.</param>
      <returns>
        <c>true</c> if the event was successfully removed, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBEvent.Remove(Thinksquirrel.WordGameBuilder.WGBEvent)">
      <summary>
            Remove the first instance of an event.
            </summary>
      <param name="evt">The event to remove.</param>
      <returns>
        <c>true</c> if the event was successfully removed, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBEvent.Invoke">
      <summary>
            Invokes the event directly. This will never run outside of play mode.
            </summary>
      <remarks>
            When an event is invoked directly, state variables are not set.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBEvent.InvokeUnsafe">
      <summary>
            Invokes the event directly. This can run in the editor, and therefore corrupt state! Use carefully.
            </summary>
      <remarks>
            When an event is invoked directly, state variables are not set.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBEvent.Invoke(Thinksquirrel.WordGameBuilder.WGBEvent,Thinksquirrel.WordGameBuilder.WordGameLanguage,Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile,Thinksquirrel.WordGameBuilder.ObjectModel.ITilePool,Thinksquirrel.WordGameBuilder.ObjectModel.IWildcardTileManager,Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer,Thinksquirrel.WordGameBuilder.ObjectModel.IWordGameAgent,System.Action,System.Action)">
      <summary>
            Invoke an event with the current event state.
            </summary>
      <remarks>
            Events that are invoked during other event callbacks are deferred into a queue until the current event is finished.
            </remarks>
      <param name="evt">The event to invoke.</param>
      <param name="currentLanguage">The current language (defaults to Language.current).</param>
      <param name="currentLetterTile">The current letter tile, if any.</param>
      <param name="currentTilePool">The current tile pool, if any.</param>
      <param name="currentWildcardTileManager">The current wildcard tile manager, if any.</param>
      <param name="currentPlayer">The current player, if any.</param>
      <param name="currentAgent">The current agent, if any.</param>
      <param name="additionalPreCallback">An additional action that is run just before the event actually occurs.</param>
      <param name="additionalPostCallback">An additional action that is run just after the event actually occurs.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBEvent.op_Implicit(Thinksquirrel.WordGameBuilder.WGBEvent)~System.Boolean">
      <summary>
            Boolean operator. Returns true if the event is both not null and not empty.
            </summary>
      <param name="e">The event to test.</param>
      <returns>
        <c>true</c> if the event is both null and not empty, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBEvent.op_Addition(Thinksquirrel.WordGameBuilder.WGBEvent,Thinksquirrel.WordGameBuilder.WGBEventDelegate)">
      <summary>
            Add operator. Provides .NET-like syntax for adding delegates to an event (on____ += myDelegate).
            </summary>
      <param name="e">The event to add to.</param>
      <param name="del">The delegate to add to the event.</param>
      <returns>The event that was added to. This is the same object passed on the left hand side of the expression.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBEvent.op_Subtraction(Thinksquirrel.WordGameBuilder.WGBEvent,Thinksquirrel.WordGameBuilder.WGBEventDelegate)">
      <summary>
            Subtract operator. Provides .NET-like syntax for removing delegates from an event (on___ -= myDelegate).
            </summary>
      <param name="e">The event to remove from..</param>
      <param name="del">The delegate to remove from the event.</param>
      <returns>The event that was removed from. This is the same object passed on the left hand side of the expression.</returns>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.WGBExtensions">
      <summary>
            Contains extension methods for various classes.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBExtensions.GetComponentFromInterface``1(UnityEngine.GameObject)">
      <summary>
            Gets a component from its interface type. (Extension method)
            </summary>
      <typeparam name="T">
            The interface type of the component. Must be an IMonoBehaviour.
            </typeparam>
      <param name="gameObject">The GameObject to search.</param>
      <returns>The found object as an interface. Returns null if no object was found.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBExtensions.GetComponentsFromInterface``1(UnityEngine.GameObject)">
      <summary>
            Gets all components from its interface type. (Extension method)
            </summary>
      <typeparam name="T">
            The interface type of the component. Must be an IMonoBehaviour.
            </typeparam>
      <param name="gameObject">The GameObject to search.</param>
      <returns>An array of found objects, as an interface. Returns an empty array if no objects were found.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBExtensions.GetComponentInChildrenFromInterface``1(UnityEngine.GameObject)">
      <summary>
            Gets a component from its interface type, searching through this GameObject and all children. (Extension method)
            </summary>
      <typeparam name="T">
            The interface type of the component. Must be an IMonoBehaviour.
            </typeparam>
      <param name="gameObject">The GameObject to search.</param>
      <returns>The found object as an interface. Returns null if no object was found.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBExtensions.GetComponentsInChildrenFromInterface``1(UnityEngine.GameObject)">
      <summary>
            Gets all components from its interface type, searching through this GameObject and all children. (Extension method)
            </summary>
      <typeparam name="T">
            The interface type of the component. Must be an IMonoBehaviour.
            </typeparam>
      <param name="gameObject">The GameObject to search.</param>
      <returns>An array of found objects, as an interface. Returns an empty array if no objects were found.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBExtensions.GetComponentFromInterface``1(UnityEngine.Component)">
      <summary>
            Gets a component from its interface type. (Extension method)
            </summary>
      <typeparam name="T">
            The interface type of the component. Must be an IMonoBehaviour.
            </typeparam>
      <param name="component">The Component to search.</param>
      <returns>The found object as an interface. Returns null if no object was found.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBExtensions.GetComponentsFromInterface``1(UnityEngine.Component)">
      <summary>
            Gets all components from its interface type. (Extension method)
            </summary>
      <typeparam name="T">
            The interface type of the component. Must be an IMonoBehaviour.
            </typeparam>
      <param name="component">The Component to search.</param>
      <returns>An array of found objects, as an interface. Returns an empty array if no objects were found.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBExtensions.GetComponentInChildrenFromInterface``1(UnityEngine.Component)">
      <summary>
            Gets a component from its interface type, searching through this GameObject and all children. (Extension method)
            </summary>
      <typeparam name="T">
            The interface type of the component. Must be an IMonoBehaviour.
            </typeparam>
      <param name="component">The Component to search.</param>
      <returns>The found object as an interface. Returns null if no object was found.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WGBExtensions.GetComponentsInChildrenFromInterface``1(UnityEngine.Component)">
      <summary>
            Gets all components from its interface type, searching through this GameObject and all children. (Extension method)
            </summary>
      <typeparam name="T">
            The interface type of the component. Must be an IMonoBehaviour.
            </typeparam>
      <param name="component">The Component to search.</param>
      <returns>An array of found objects, as an interface. Returns an empty array if no objects were found.</returns>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.WordGameLanguage">
      <summary>
            Represents a language for a word game.
            </summary>
      <remarks>
            Most aspects of a language are edited through the Language Editor.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WordGameLanguage.decompressOnLoad">
      <summary>
            Should a language automatically be decompressed on load?
            </summary>
      <remarks>
            Note that this only applies to languages called with Language.current. Other languages will only decompress if set to the current language.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WordGameLanguage.defaultLanguage">
      <summary>
            Gets or sets the default language, by name. This value is saved to PlayerPrefs.
            </summary>
      <remarks>
            This is initially set to English.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WordGameLanguage.current">
      <summary>
            Gets or sets the current language.
            </summary>
      <remarks>
            If the current language is not set, this property returns the default language (if available), or the first loaded language. If no languages are loaded, this property attempts to load all langauges with Language.LoadLanguages().
            Due to how Unity compares objects, this property is not thread-safe. To get around this, cache the language first.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WordGameLanguage.languageName">
      <summary>
            Gets or sets the language name.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WordGameLanguage.identifier">
      <summary>
            Gets or sets the language's identifier (usually the file name).
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WordGameLanguage.culture">
      <summary>
            The language's culture.
            </summary>
      <remarks>
            Returns the invariant culture by default.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WordGameLanguage.cultureName">
      <summary>
            The language's culture code.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WordGameLanguage.letters">
      <summary>
            Gets the list of letters in the language.
            </summary>
      <remarks>
            This list is automatically sorted in alphabetical order, based on the language's culture. Modifying this list may automatically trigger word list optimization.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WordGameLanguage.wordSet">
      <summary>
            The WordSet data structure of the language.
            </summary>
      <remarks>
            This holds all of a language's words.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WordGameLanguage.wordCount">
      <summary>
            Gets the number of words in the language.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WordGameLanguage.allowBlanks">
      <summary>
            Gets or sets whether the language should allow blank or wildcard letters.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WordGameLanguage.caseSensitive">
      <summary>
            Gets or sets whether string lookups should be case-sensitive.
            </summary>
      <remarks>
            If disabled, all data is normalized to upper-case.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WordGameLanguage.blankLetterWeight">
      <summary>
            Gets or sets the weight of blank letters for random distribution.
            </summary>
      <remarks>
            Must be positive. Higher values = less occurances.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.GetAllLanguages">
      <summary>
            Gets an array with every currently loaded language.
            </summary>
      <returns>An array with every currently loaded language.</returns>
      <remarks>This operation should not be called every frame.</remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.GetLanguageCount">
      <summary>
            Gets the loaded language count.
            </summary>
      <returns>The number of currently loaded languages.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.FindByIdentifier(System.String)">
      <summary>
            Finds a loaded language by identifier.
            </summary>
      <param name="identifier">The identifier to search for.</param>
      <returns>The found language, or <c>null</c> if no language was found.</returns>.</member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.FindByName(System.String)">
      <summary>
            Finds the first occurance of a loaded language by name.
            </summary>
      <param name="name">The name to search for.</param>
      <returns>The found language, or <c>null</c> if no language was found.</returns>.</member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.RemoveByIdentifier(System.String)">
      <summary>
            Unloads a language by identifier.
            </summary>
      <remarks>
            This method does not delete the actual language file, to prevent unintentional data loss.
            </remarks>
      <param name="identifier">The identifier to search for.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.RemoveByName(System.String)">
      <summary>
            Unloads the first occurance of a language by name.
            </summary>
      <remarks>
            This method does not delete the actual language file, to prevent unintentional data loss.
            </remarks>
      <param name="name">The name to search for.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.RemoveAll">
      <summary>
            Completely unloads all languages.
            </summary>
      <remarks>
            This method does not delete the actual language file, to prevent unintentional data loss.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.LoadAllLanguages">
      <summary>
            Loads all language files from resources.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.LoadLanguage(System.String)">
      <summary>
            Loads a language by identifier (file name).
            </summary>
      <param name="identifier">The language identifier to load.</param>
      <returns>The loaded language.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.Create(System.String,System.String)">
      <summary>
            Creates a language with the given name and identifier (file name).
            </summary>
      <param name="name">The new language name.</param>
      <param name="identifier">The new language identifier. Must be unique.</param>
      <returns>The created language.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.Copy">
      <summary>
            Deep copy this language to a new language. A unique name will be assigned to the language identifier.
            </summary>
      <returns>
            The newly copied language.
            </returns>
      <remarks>&gt;
            The language's random number generator is not deep copied with this method.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.Copy(System.String,System.String)">
      <summary>
            Deep copy this language to a new language.
            </summary>
      <param name="newName">The name of the new language.</param>
      <param name="newIdentifier">The idenfitier of the new language. Must be unique.</param>
      <returns>
            The newly copied language. This language will not be expanded and must be decompressed. Runtime sets will not be copied.
            </returns>
      <remarks>&gt;
            The language's random number generator is not deep copied with this method.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.ToString">
      <summary>
            Returns a string that represents the current language.
            </summary>
      <returns>
            A string that represents the current language.
            </returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.GetWords">
      <summary>
            Gets an array of all words in the language.
            </summary>
      <remarks>
            This is a very expensive operation and is usually not needed.
            </remarks>
      <returns>An list of all words. This array can be very large!</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.SetCulture(System.String)">
      <summary>
            Sets the culture of a language.
            </summary>
      <param name="cultureCode">The culture code to set.</param>
      <remarks>This will trigger a re-optimization of the language.</remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.ClearCulture">
      <summary>
            Clears the culture of a language, resetting it to use the invariant culture.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.ImportLettersFromCsv(System.IO.Stream)">
      <summary>
            Imports the letters of a language from a CSV stream.
            </summary>
      <param name="stream">The stream to import letters from.</param>
      <remarks>
            After importing, the stream must be closed manually.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.ImportWordsFromCsv(System.IO.Stream)">
      <summary>
            Imports the words of a language from a CSV file.
            </summary>
      <param name="stream">The stream to import words from.</param>
      <remarks>
            After importing, the stream must be closed manually.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.ImportWordsFromCsv(System.IO.Stream,System.Boolean)">
      <summary>
            Imports the words of a language from a CSV file.
            </summary>
      <param name="stream">The stream to import words from.</param>
      <param name="append">If <c>true</c>, append the words to the current set.</param>
      <remarks>
            After importing, the stream must be closed manually.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.ExportLettersToCsv(System.IO.Stream)">
      <summary>
            Exports the letters of a language to a CSV file.
            </summary>
      <param name="stream">The stream to export letters to.</param>
      <remarks>
            After exporting, the stream must be closed manually.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.ExportWordsToCsv(System.IO.Stream)">
      <summary>
            Exports the words of a language to a CSV file.
            </summary>
      <param name="stream">The stream to export letters to.</param>
      <remarks>
            After exporting, the stream must be closed manually.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.GetLetter(System.String)">
      <summary>
            Gets the Letter struct for the specified string (Letter.text).
            </summary>
      <param name="letter">The letter string to search for.</param>
      <returns>A Letter struct representing the specified string.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.GetLetter(System.Char)">
      <summary>
            Gets the Letter struct for the specified character value (Letter.character).
            </summary>
      <param name="letterValue">The letter character value to search for.</param>
      <returns>A Letter struct representing the specified character value.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.PreviousLetter(Thinksquirrel.WordGameBuilder.Letter)">
      <summary>
            Gets the previous letter in the language's alphabet.
            </summary>
      <remarks>
            Wraps back to the last letter by default. If allowBlanks is enabled, includes a blank letter at the end of the alphabet.
            </remarks>
      <param name="firstLetter">The letter to move from.</param>
      <returns>The previous letter in the alphabet.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.PreviousLetter(Thinksquirrel.WordGameBuilder.Letter,System.Boolean)">
      <summary>
            Gets the previous letter in the language's alphabet.
            </summary>
      <remarks>
            If allowBlanks is enabled, includes a blank letter at the end of the alphabet.
            </remarks>
      <param name="firstLetter">The letter to move from.</param>
      <param name="wrap">If <c>true</c>, wrap to the last letter if this is run on the first letter.</param>
      <returns>The previous letter in the alphabet.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.NextLetter(Thinksquirrel.WordGameBuilder.Letter)">
      <summary>
            Gets the next letter in the language's alphabet.
            </summary>
      <remarks>
            Wraps back to the first letter by default. If allowBlanks is enabled, includes a blank letter at the end of the alphabet.
            </remarks>
      <param name="firstLetter">The letter to move from.</param>
      <returns>The next letter in the alphabet.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.NextLetter(Thinksquirrel.WordGameBuilder.Letter,System.Boolean)">
      <summary>
            Gets the next letter in the language's alphabet.
            </summary>
      <remarks>
            If allowBlanks is enabled, includes a blank letter at the end of the alphabet.
            </remarks>
      <param name="firstLetter">The letter to move from.</param>
      <param name="wrap">If <c>true</c>, wrap to the first letter if this is run on the last letter.</param>
      <returns>The next letter in the alphabet.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.GetRandomLetter">
      <summary>
            Gets a random letter from the language's alphabet.
            </summary>
      <remarks>
            Uses a weighted distribution based on score by default.
            </remarks>
      <returns>A weighted random letter.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.GetRandomLetter(System.Boolean)">
      <summary>
            Gets a random letter from the language's alphabet.
            </summary>
      <remarks>
            Uses a weighted distribution based on score by default.
            </remarks>
      <param name="weighted">If <c>true</c>, a weighted distribution of letters will be used, based on score.</param>
      <returns>A random letter.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.GetRandomLetters(System.Int32)">
      <summary>
            Gets a list of random letters from the language's alphabet, up to the specified count.
            </summary>
      <remarks>
            Uses a weighted distribution based on score by default.
            </remarks>
      <param name="count">The amount of random letters to obtain.</param>
      <returns>A list of random letters.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.GetRandomLetters(System.Int32,System.Boolean)">
      <summary>
            Gets a list of random letters from the language's alphabet, up to the specified count.
            </summary>
      <remarks>
            Uses a weighted distribution based on score by default.
            </remarks>
      <param name="count">The amount of random letters to obtain.</param>
      <param name="weighted">If <c>true</c>, a weighted distribution of letters will be used, based on score.</param>
      <returns>A list of random letters.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.ClearRandomLetterCache">
      <summary>
            Clears the cache of random letters.
            </summary>
      <remarks>
            This needs to be called manually if you use a random letter method and change letter information or enable/disable blank letters at runtime.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.GetRandomWord">
      <summary>
            Gets a random word from the language.
            </summary>
      <returns>A random word from the language.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.GetRandomWord(System.Int32)">
      <summary>
            Gets a random word from the language, ensuring that it is under the maximum amount of letters.
            </summary>
      <remarks>
            This is a recursive random search and hard-capped at 10,000 iterations (it returns null on failure).
            It is recommended to prune unused words from the language to help ensure this search does not fail.
            </remarks>
      <param name="maxLetters">The maximum amount of letters permitted for a random word.</param>
      <returns>A random word from the language, up to maxLetters.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.SetRandomNumberGenerator(System.Int32)">
      <summary>
            Sets the psuedo-random number generator for the language.
            The pRNG's seed is time-based by default.
            </summary>
      <param name="seed">The random seed to assign to the language.</param>
      <remarks>
            The pRNG is used for picking random letters, random words, and lossy prefix search.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordGameLanguage.GetRandomNumberGenerator">
      <summary>
            Gets the psuedo-random number generator for the language.
            </summary>
      <remarks>
            The pRNG is used for picking random letters, random words, and lossy prefix search.
            </remarks>
      <returns>The language's random number generator.</returns>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.WordResult">
      <summary>
            Represents a result from a word lookup operation.
            </summary>
      <remarks>
            Note that this type is passed by value for performance reasons.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WordResult.allWords">
      <summary>
            All words returned from the lookup operation.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WordResult.hasValue">
      <summary>
            Whether or not the result is empty.
            </summary>
      <remarks>
            This only returns false as a result of an invalid word lookup operation.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WordResult.input">
      <summary>
            The input string for the lookup operation.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WordResult.isValid">
      <summary>
            Whether or not the result is valid (at least one word was found).
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WordResult.wasOrdered">
      <summary>
            Whether or not the word lookup was an ordered search.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WordResult.word">
      <summary>
            The first word found in the lookup operation. Included for convenience.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WordResult.empty">
      <summary>
            Represents an empty WordResult.
            </summary>
      <remarks>
            This is only created as a result of an invalid word lookup operation. Assigning a WordResult to this value is useful to invalidate previous results.
            </remarks>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.WordSet">
      <summary>
            A specialized data structure for storing letters and words.
            </summary>
      <remarks>
            The WordSet is a highly optimized structure for fast word searches. It is loaded in a compressed form, and must be decompressed before lookup operations will work.
            </remarks>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.WordSet.k_MaxPrefixLength">
      <summary>
            The maximum length of a prefix in the word set's internal representation.
            </summary>
      <remarks>
            This value is implementation-specific and cannot be changed.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WordSet.wordCount">
      <summary>
            Gets the amount of words in the word set.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.WordSet.isExpanded">
      <summary>
            Whether or not the word set is expanded in memory.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordSet.Optimize">
      <summary>
            Optimizes a word set for fast searches. This may take a while and should be done offline - not at runtime.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordSet.Decompress">
      <summary>
            Expands the set from compressed form.
            </summary>
      <remarks>
            If Language.decompressOnLoad is disabled, this must be called explicitly.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordSet.Decompress(System.Action{System.Single},System.Int32)">
      <summary>
            Expands the set from compressed form. Yields when progress is updated and can be used in a coroutine.
            </summary>
      <param name="progressCallback">
            The method to call each time the task's progress is updated. This method must take a float as the only argument.
            </param>
      <param name="iterationsPerFrame">
            The maximum amount of iterations to process per frame. Defaults to 100.
            </param>
      <returns>An IEnumerator object. This method can be used as a coroutine.</returns>
      <remarks>
            If Language.decompressOnLoad is disabled, this must be called explicitly.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordSet.DecompressAsync">
      <summary>
            Expands the set from compressed form asynchronously.
            </summary>
      <returns>
            An object representing an asynchronous task.
            </returns>
      <remarks>
            If Language.decompressOnLoad is disabled, this must be called explicitly.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordSet.DecompressAsync(System.Action)">
      <summary>
            Expands the set from compressed form asynchronously.
            </summary>
      <returns>
            An object representing an asynchronous task.
            </returns>
      <param name="callback">
            The method to call upon completion.
            </param>
      <remarks>
            If Language.decompressOnLoad is disabled, this must be called explicitly.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordSet.DecompressAsync(System.Action,System.Action{System.Single},System.Int32)">
      <summary>
            Expands the set from compressed form asynchronously.
            </summary>
      <returns>
            An object representing an asynchronous task.
            </returns>
      <param name="callback">
            The method to call upon completion.
            </param>
      <param name="progressCallback">
            The method to call each time the task's progress is updated. This method must take a float as the only argument.
            </param>
      <param name="iterationsPerFrame">
            The amount of iterations per progress frame.
            </param>
      <remarks>
            If Language.decompressOnLoad is disabled, this must be called explicitly.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordSet.CollapseSet">
      <summary>
            Compress the set into compressed form to save memory. Also clears the runtime set.
            </summary>
      <remarks>
            The word set cannot be used in compressed form.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordSet.Insert(System.String)">
      <summary>
            Inserts a word into the set.
            </summary>
      <param name="word">The word to insert into the set.</param>
      <returns>
        <c>true</c> if the operation was successful; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordSet.InsertRange(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Inserts an enumerable of words into the set.
            </summary>
      <param name="words">The words to insert.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordSet.Contains(System.String)">
      <summary>
            Returns true if the word set contains a word.
            </summary>
      <remarks>
            Search operations in the word set use the underlying dictionary strings, unlike the WordChecker class (which uses letter tiles).
            </remarks>
      <param name="word">The word to search for.</param>
      <returns>
        <c>true</c> if the word was found, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordSet.Contains(System.String,System.Int32,System.Int32,System.Collections.Generic.IList{System.String})">
      <summary>
            Returns the amount of words that starts with the specified prefix.
            </summary>
      <remarks>
            Accepts a pre-allocated list (should be empty) to use for calculations.
            </remarks>
      <param name="prefix">The prefix to search for.</param>
      <param name="maxWordLength">The maximum allowed word length.</param>
      <param name="maxIterations">The maximum amount of iterations to perform.</param>
      <param name="stringList">A scratch list for prefix calculations.</param>
      <returns>The amount of words found.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordSet.FindWord(System.String,System.Boolean)">
      <summary>
            Finds the word in the set.
            </summary>
      <returns>
            A WordResult representing the results of the lookup operation.
            </returns>
      <param name="word">
            The string input for the lookup operation.
            </param>
      <param name="ordered">
            If true, performs a check on the string, in order. If false, performs a permutation check on every combination of the string.
            </param>
      <remarks>
            Search operations in the word set use the underlying dictionary strings, unlike the WordChecker class, which uses letter tiles.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordSet.FindWord(System.String,System.Boolean,System.Int32,System.Int32)">
      <summary>
            Finds the word in the set.
            </summary>
      <returns>
            A WordResult representing the results of the lookup operation.
            </returns>
      <param name="word">
            The string input for the lookup operation.
            </param>
      <param name="ordered">
            If true, performs a check on the string, in order. If false, performs a permutation check on every combination of the string.
            </param>
      <param name="maxWordLength">
            The maximum length of a word input. If the input is longer than this value, it will be truncated.
            </param>
      <param name="maxIterations">
            The maximum amount of iterations for any permutation checks.
            </param>
      <remarks>
            Search operations in the word set use the underlying dictionary strings, unlike the WordChecker class, which uses letter tiles.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordSet.FindWordAsync(System.String,System.Boolean,System.Action{Thinksquirrel.WordGameBuilder.WordResult})">
      <summary>
            Finds the word in the set, asynchronously.
            </summary>
      <returns>
            An Task representing the asynchronous task.
            </returns>
      <param name="word">
            The string input for the lookup operation.
            </param>
      <param name="ordered">
            If true, performs a check on the string, in order. If false, performs a permutation check on every combination of the string.
            </param>
      <param name="callback">
            The method to call upon completion. This method must take a WordResult as the only argument.
            </param>
      <remarks>
            Search operations in the word set use the underlying dictionary strings, unlike the WordChecker class, which uses letter tiles.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordSet.FindWordAsync(System.String,System.Boolean,System.Int32,System.Int32,System.Action{Thinksquirrel.WordGameBuilder.WordResult})">
      <summary>
            Finds the word in the set, asynchronously.
            </summary>
      <returns>
            An Task representing the asynchronous task.
            </returns>
      <param name="word">
            The string input for the lookup operation.
            </param>
      <param name="ordered">
            If true, performs a check on the string, in order. If false, performs a permutation check on every combination of the string.
            </param>
      <param name="maxWordLength">
            The maximum length of a word input. If the input is longer than this value, it will be truncated.
            </param>
      <param name="maxIterations">
            The maximum amount of iterations for any permutation checks.
            </param>
      <param name="callback">
            The method to call upon completion. This method must take a WordResult as the only argument.
            </param>
      <remarks>
            Search operations in the word set use the underlying dictionary strings, unlike the WordChecker class, which uses letter tiles.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordSet.FindWords(System.String,System.Int32,System.Int32)">
      <summary>
            Returns all words that begin with a prefix, up to maxIterations. Returns Wordresult.empty if no words are found.
            </summary>
      <param name="prefix">
            The prefix to search.
            </param>
      <param name="maxWordLength">
            The maximum allowed word length.
            </param>
      <param name="maxIterations">
            The maximum amount of iterations allowed.
            </param>
      <returns>
            A WordResult representing the results of the lookup operation.
            </returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordSet.FindWordsAsync(System.String,System.Int32,System.Int32,System.Action{Thinksquirrel.WordGameBuilder.WordResult})">
      <summary>
            Asynchronously returns all words that begin with a prefix, up to maxIterations.
            </summary>
      <returns>
            An Task representing the asynchronous task.
            </returns>
      <param name="prefix">
            The prefix to search.
            </param>
      <param name="maxWordLength">
            The maximum allowed word length.
            </param>
      <param name="maxIterations">
            The maximum amount of iterations allowed.
            </param>
      <param name="callback">
            The method to call upon completion. This method must take a WordResult as the only argument.
            </param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.WordSet.Remove(System.String)">
      <summary>
            Removes a word from the set.
            </summary>
      <param name="word">The word to remove.</param>
      <returns>
        <c>true</c> if the operation was successful; otherwise <c>false</c>.</returns>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Gameplay.TilePool">
      <summary>
            A class that manages an instance pool of letter tiles.
            </summary>
      <remarks>
            This class creates an instance pool based on a specific letter distribution. It implements IList&lt;ILetterTile&gt;.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.Item(System.Int32)">
      <summary>
            Gets or sets the letter tile at the specified index.
            </summary>
      <param name="index">The zero-based index of the letter tile to get or set.</param>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.languageIdentifier">
      <summary>
            The language identifier associated with the tile pool.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.tilePrefab">
      <summary>
            The tile prefab. This must contain a MonoBehaviour that implements ILetterTile.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.blankLetterCount">
      <summary>
            The amount of blank letters in the tile distribution.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.poolMultiplier">
      <summary>
            A multiplier for the tile distribution. Used to easily increase the amount of tiles created.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.tileDistributionCount">
      <summary>
            Gets or sets the amount of elements in the tile distribution.
            </summary>
      <remarks>
            Used in the editor for serailization.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.language">
      <summary>
            The language associated with the tile pool.
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.ITilePool.language">ITilePool</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.tileDistribution">
      <summary>
            Gets the tile distribution dictionary.
            </summary>
      <remarks>
            This dictionary is only used at runtime. To add or remove from the dictionary in the editor, call the Add and Remove methods on the TilePool class.
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.ITilePool.tileDistribution">ITilePool</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.onTileDistribution">
      <summary>
            This event fires when a tile is distributed from the tile pool.
            </summary>
      <remarks>
            Variables set:
            * WGBEvent.currentLanguage
            * WGBEvent.currentTilePool
            * WGBEvent.currentPlayer
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.ITilePool.onTileDistribution">ITilePool</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.lastDistributionCount">
      <summary>
            Gets the last tile distribution count. This value is set before event callbacks.
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.ITilePool.lastDistributionCount">ITilePool</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.Count">
      <summary>
            Returns the amount of tiles in the tile pool.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.IsReadOnly">
      <summary>
            Returns true if the tile is read only.
            </summary>
      <remarks>
            In the default tile pool implementation, this will always return false.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.IEnumerable.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the tile pool.
            </summary>
      <returns>An enumerator for the tile pool.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.AddLetter(Thinksquirrel.WordGameBuilder.Letter,System.Int32)">
      <summary>
            Add the specified letter and count to the tile distribution dictionary.
            </summary>
      <param name="letter">The letter to add.</param>
      <param name="count">The amount of tiles to add.</param>
      <returns>
        <c>true</c> if the operation was successful; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.RemoveLetter(Thinksquirrel.WordGameBuilder.Letter)">
      <summary>
            Remove the specified letter from the tile distribution dictionary.
            </summary>
      <param name="letter">The letter to remove.</param>
      <returns>
        <c>true</c> if the operation was successful; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.SaveTileDistribution">
      <summary>
            Saves the tile distribution dictionary.
            </summary>
      <remarks>
            When modifying the tile distribution dictionary, this method must be called to serialize the tile pool.
            This is usually only needed in the editor.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.SetTiles(System.Collections.Generic.IList{Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile})">
      <summary>
            Sets the tile pool.
            </summary>
      <remarks>
            This destroys any tiles currently created by the pool, and replaces the entire pool. Used for advanced serialization.
            </remarks>
      <param name="tiles">A list of tiles to add to the newly created pool.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.CreateTilePool(UnityEngine.Transform)">
      <summary>
            Creates the tile pool.
            </summary>
      <param name="parent">
            The parent transform for the tile pool.
            </param>
      <remarks>
            This destroys any tiles currently created by the pool (whether it is in the pool or not), and instantiates tile pool objects based on the letter distribution.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.RemoveTiles(System.Collections.Generic.IList{Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile})">
      <summary>
            Removes a list of tiles from the pool, if the tiles are associated with the pool.
            </summary>
      <param name="tiles">The list of tiles to remove.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.DestroyTiles(System.Collections.Generic.IList{Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile})">
      <summary>
            Destroys a list of tiles from the scene, if the tiles are associated with the pool.
            </summary>
      <param name="tiles">The list of tiles to destroy.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.IndexOf(Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile)">
      <summary>
            Determines the index of a specific tile in the tile pool.
            </summary>
      <returns>The index of item if found in the list; otherwise, -1.</returns>
      <param name="item">The tile to search for.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.Insert(System.Int32,Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile)">
      <summary>
            Inserts a letter tile into the pool at the specified position, if it does not already contain it.
            </summary>
      <param name="index">The position at which to insert the tile.</param>
      <param name="item">The tile to insert.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.RemoveAt(System.Int32)">
      <summary>
            Removes the letter tile at the specified index.
            </summary>
      <param name="index">The index at which to remove a letter tile.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.Add(Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile)">
      <summary>
            Adds a tile to the tile pool. If the pool already contains the tile, this does nothing.
            </summary>
      <remarks>This method is an O(<i>n</i>) operation, where <i>n</i> is the number of tiles in the pool.</remarks>
      <param name="item">The tile to add to the pool.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.Clear">
      <summary>
            Clears all tiles from the tile pool.
            </summary>
      <remarks>
            This does not delete or remove any tile objects.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.Contains(Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile)">
      <summary>
            Determines if the specified tile is contained within the tile pool.
            </summary>
      <param name="item">The tile to search for.</param>
      <returns>True if the tile pool contains the specified tile; otherwise, false.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.CopyTo(Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile[],System.Int32)">
      <summary>
            Copies the contents of the tile pool to a compatible one-dimensional array, starting at the specified index of the target array.
            </summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the tile pool.</param>
      <param name="arrayIndex">The zero-based index in <i>array</i> at which copying begins.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.Remove(Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile)">
      <summary>
            Removes the specified tile from the tile pool.
            </summary>
      <param name="item">The tile to remove.</param>
      <returns>True if the operation was successful; otherwise, false.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.TilePool.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the tile pool (generic version).
            </summary>
      <returns>An enumerator for the tile pool.</returns>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Gameplay.WildcardTileManager">
      <summary>
            A manager class for selecting wildcard tiles.
            </summary>
      <remarks>
            This component does not have any implementation on if/how wildcard tiles should be selected.
            It only sends a message to a target game object, which provides the implementation.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WildcardTileManager.onWildcardTileSelect">
      <summary>
            This event fires when a selection attempt occurs on a blank tile.
            </summary>
      <remarks>
            Variables set:
            * WGBEvent.currentLanguage
            * WGBEvent.currentLetterTile
            * WGBEvent.currentWildcardTileManager
            * WGBEvent.currentPlayer
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWildcardTileManager.onWildcardTileSelect">IWildcardTileManager</see>.
            </remarks>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Gameplay.WordChecker">
      <summary>
            Helper methods to check for a word in a language, using letter tiles as input.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordChecker.maxWordLength">
      <summary>
            The maximum word length for any word checks.
            </summary>
      <remarks>
            Inputs above this value will be truncated.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordChecker.maxIterations">
      <summary>
            The maximum amount of iterations for any permutation checks.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordChecker.taskCount">
      <summary>
            Gets the amount of currently running asynchronous tasks.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.WordChecker.AbortAllTasks">
      <summary>
            Aborts all asynchronous tasks.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.WordChecker.GetWord(System.Collections.Generic.IList{Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile})">
      <summary>
            Gets the word from a list of a letter tiles.
            </summary>
      <remarks>
            Does not perform any dictionary checks.
            </remarks>
      <param name="letterTiles">The list of letter tiles to turn into a word.</param>
      <returns>A word from the list of letter tiles.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.WordChecker.CheckWord(System.Collections.Generic.IList{Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile},System.Boolean,Thinksquirrel.WordGameBuilder.WordGameLanguage,System.Int32,System.Int32)">
      <summary>
            Checks the input word against a language dictionary.
            </summary>
      <returns>
            A WordGameResult representing the results of the lookup operation.
            </returns>
      <param name="letterTiles">
            The letter tile input for the lookup operation.
            </param>
      <param name="ordered">
            If true, performs a check on the tiles, in order. If false, performs a permutation check on every combination of the letter tiles. Defaults to true.
            </param>
      <param name="language">
            The language to check the word against. Defaults to the current language.
            </param>
      <param name="maxWordLength">
            The maximum word length for the lookup operation. Defaults to WordChecker.maxWordLength.
            </param>
      <param name="maxIterations">
            The maximum amount of iterations for any permutation checks. Defaults to WordChecker.maxWordLength.
            </param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.WordChecker.CheckWordAsync(System.Collections.Generic.IList{Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile},System.Action{Thinksquirrel.WordGameBuilder.Gameplay.WordGameResult},System.Boolean,Thinksquirrel.WordGameBuilder.WordGameLanguage,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Checks the input word against the dictionary, asynchronously on another thread.
            </summary>
      <returns>
            An Task representing the asynchronous task.
            </returns>
      <param name="letterTiles">
            The letter tile input for the lookup operation.
            </param>
      <param name="callback">
            The method to call upon completion. This method must take a WordGameResult as the only argument.
            </param>
      <param name="ordered">
            If true, performs a check on the tiles, in order. If false, performs a permutation check on every combination of the letter tiles.
            </param>
      <param name="language">
            The language to check the word against.
            </param>
      <param name="maxWordLength">
            The maximum word length for the lookup operation. Overrides WordChecker.maxWordLength.
            </param>
      <param name="maxIterations">
            The maximum amount of iterations for any permutation checks. Overrides WordChecker.maxWordLength.
            </param>
      <param name="forceAsync">
            If true, this method will always execute on another thread.
            </param>
      <remarks>
            If less than 4 tiles are specified and forceAsync = false, this method is run on the same thread that it is called and returns an empty task.
            </remarks>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Gameplay.WordGameAgent">
      <summary>
            Represents a word game AI agent. The agent is multithreaded and supports automatic selection/submission.
            </summary>
      <remarks>
            This component requires a WordGamePlayer to be present. Letter tile implementations that use ISelectableLetterTile will obey selection rules.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameAgent.ignorePlayerInputState">
      <summary>
            If true, ignore the player's inputEnabled property.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameAgent.threshold">
      <summary>
            Controls how many candidate words are kept when sorted by score.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameAgent.bias">
      <summary>
            A value between 0 and 1 that controls how aggressive or "intelligent" the agent is at getting words.
            </summary>
      <remarks>
            A value of 0 will pick a random word from the top candidates. A value of 1 will always find the highest-scoring word from the top candidates.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameAgent.minWordLength">
      <summary>
            The minimum amount of letters for a candidate word.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameAgent.maxWordLength">
      <summary>
            The maximum amount of letters for a candidate word.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameAgent.maxPrefixIterations">
      <summary>
            For long words (over a word set's max prefix length), a prefix check is performed to speed up the algorithm.
            This value controls the maximum number of iterations to perform with the prefix check.
            </summary>
      <remarks>
            Higher iteration counts take more processing and memory power, but produce more accurate results.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameAgent.maxWords">
      <summary>
            The maximum amount of words to find before selecting a candidate.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameAgent.maxTime">
      <summary>
            The maximum amount of time (in seconds) to look for words before selecting a candidate or retrying/giving up.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameAgent.retryCount">
      <summary>
            The maximum amount of times to retry a search, if a root has not yet been searched.
            </summary>
      <remarks>
            Retries will only happen if a root hasn't been searched (All words starting with a specific tile).
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameAgent.processWildcards">
      <summary>
            If true, blank tiles will be processed as wildcard tiles.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameAgent.customWildcardScoring">
      <summary>
            If true, selecting wildcard tiles will be calculated using a custom point value.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameAgent.customWildcardScore">
      <summary>
            If customWildcardScoring = true, the custom point value to assign to wildcard tiles.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameAgent.customWildcardScores">
      <summary>
            A dictionary that can be modified to have more fine grained control over the scoring for wildcard tiles.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameAgent.autoSelectWord">
      <summary>
            If enabled, automatically select the best found word.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameAgent.autoSelectTime">
      <summary>
            If autoSelectWord is enabled, the amount of time to wait between selecting tiles.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameAgent.autoSubmitWord">
      <summary>
            If enabled, automatically submit the best found word. This has no effect if autoSelectWord is disabled.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameAgent.autoSubmitTime">
      <summary>
            If autoSubmitWord is enabled, the amount of time to wait before submitting tiles. This has no effect if autoSelectWord is disabled.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameAgent.onFindWords">
      <summary>
            This event fires whenever the agent has found a set of words.
            </summary>
      <remarks>
            Note that this will fire immediately after a set of words has been found, even if words are being automatically selected.
            Variables set:
            * WGBEvent.currentLanguage
            * WGBEvent.currentPlayer
            * WGBEvent.currentAgent
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGameAgent.onFindWords">IWordGameAgent</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameAgent.lastSearchInfo">
      <summary>
            Gets information about the last agent search. This is set right before event callbacks.
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGameAgent.lastSearchInfo">IWordGameAgent</see>.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.WordGameAgent.FindWords(System.Collections.Generic.IList{Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile},System.Boolean,System.Single,System.Boolean,System.Single)">
      <summary>
            Finds a set of words, based on a list of letter tiles.
            </summary>
      <param name="tiles">A list of letter tiles to use when searching for words.</param>
      <param name="selectWord">If true, automatically select a word after finding it.</param>
      <param name="selectionTime">The amount of time to spend between selecting each letter if selectWord is true.</param>
      <param name="submitWord">If true, automatically submit a word after finding it. This has no effect if selectWord is false.</param>
      <param name="submissionTime">The amount of time to wait before submitting a word if submitWord is true.</param>
      <returns>
            A task object representing the asynchronous task. If a task is already running, the previous task will be aborted.
            If a player has not been selected, an empty task is returned and no callbacks are run.
            </returns>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Gameplay.AgentSearchInfo">
      <summary>
            Represents search information from a Word Game Agent.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.AgentSearchInfo.wordCount">
      <summary>
            The amount of words that were found.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.AgentSearchInfo.candidateWords">
      <summary>
            All candidate words that were found.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.AgentSearchInfo.bestWord">
      <summary>
            The "best" word, selected by the agent from the list of candidate words.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.AgentSearchInfo.bestWordTiles">
      <summary>
            The tiles that represent the best word.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.AgentSearchInfo.wasSuccessful">
      <summary>
            If true, the last search was successful.
            </summary>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer">
      <summary>
            Represents a word game player. It tracks scores, holds tiles, and can be controlled by an AI agent.
            </summary>
      <remarks>
            This class contains many convenient methods for creating a word game.
            \note Loading and saving scores from disk are not implemented - in order to have persistent data, the player will need to be initialized on load.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.playerID">
      <summary>
            The player ID. Use this for games with multiple players.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.inputEnabled">
      <summary>
            Controls whether or not input has been enabled for this player.
            </summary>
      <remarks>
            It is the responsibilty of the letter tile to check for (or ignore) this value. This is handled automatically by the default LetterTile class.
            </remarks>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.inputEnabled">IWordGamePlayer</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.maxTiles">
      <summary>
            The maximum amount of tiles that a player should hold.
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.maxTiles">IWordGamePlayer</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.orderedWordCheck">
      <summary>
            Should word checks be ordered?
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.orderedWordCheck">IWordGamePlayer</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.multiplyByPermutations">
      <summary>
            If true, the score will be multiplied by the amount of permutations found.
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.multiplyByPermutations">IWordGamePlayer</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.scorePenalty">
      <summary>
            The penalty for submitting the same word multiple times, multiplied by the number of pervious submissions.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.previousWordsCapacity">
      <summary>
            The amount of previous words to track.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.wordStringSingular">
      <summary>
            The singular string for "word". Used for localization.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.wordStringPlural">
      <summary>
            The plural string for "word". Used for localization.
            </summary>
    </member>
    <!--FIXME: Invalid documentation markup was found for member P:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.onWordResult-->
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.lastResult">
      <summary>
            Gets the last word result. This value is set before event callbacks.
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.lastResult">IWordGamePlayer</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.score">
      <summary>
            Gets or sets the player's current score.
            </summary>
      <remarks>
            Setting this value will automatically set a new high score, if it is higher than the previous high score.
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.score">IWordGamePlayer</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.highScore">
      <summary>
            Gets the player's high score.
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.highScore">IWordGamePlayer</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.lastWord">
      <summary>
            Gets the player's last word.
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.lastWord">IWordGamePlayer</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.lastWordScore">
      <summary>
            Gets the score of the player's last word.
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.lastWordScore">IWordGamePlayer</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.bestWord">
      <summary>
            Gets the player's best word.
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.bestWord">IWordGamePlayer</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.bestWordScore">
      <summary>
            Gets the score of the player's best word.
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.bestWordScore">IWordGamePlayer</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.heldTiles">
      <summary>
            Gets the list of the player's held tiles.
            </summary>
      <remarks>
            Held tiles are tiles that belong to the player, but will not be submitted.
            </remarks>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.heldTiles">IWordGamePlayer</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.selectedTiles">
      <summary>
            Gets the list of the player's selected tiles.
            </summary>
      <remarks>
            Play tiles are tiles that will be submitted for checking.
            </remarks>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.selectedTiles">IWordGamePlayer</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.previousWords">
      <summary>
            Gets the list of previous words used by the player.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.lastPenalty">
      <summary>
            Gets the last penalty value applied to the player.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.FindPlayer(System.String)">
      <summary>
            Finds a player by name.
            </summary>
      <param name="name">The name to search for.</param>
      <returns>A player, or null if no matching player is found.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.GetAllPlayers">
      <summary>
            Finds all active players in the scene.
            </summary>
      <returns>All active players.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.Initialize(System.Int32,System.String,System.Int32,System.String,System.Int32,System.Collections.Generic.IList{System.String},System.Int32)">
      <summary>
            Initialize the player.
            </summary>
      <remarks>
            Used for loading saved data.
            </remarks>
      <param name="highScore">The player's high score.</param>
      <param name="bestWord">The player's best word.</param>
      <param name="bestWordScore">The score value of the player's best word.</param>
      <param name="lastWord">The player's last word.</param>
      <param name="lastWordScore">The score value of the player's last word.</param>
      <param name="previousWords">A list of the players' previous words.</param>
      <param name="lastPenalty">The last penalty value applied to the player.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.ResetPreviousWords">
      <summary>
            Resets all previous words.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.ResetLastPenalty">
      <summary>
            Resets the last penalty.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.SubmitWord">
      <summary>
            Submits the word for checking against the current langauge's word list.
            </summary>
      <remarks>
            This method is asynchronous.
            </remarks>
      <returns>
            An object representing an asynchronous task.
            </returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.SubmitWord(System.Single)">
      <summary>
            Submits the word for checking against the current langauge's word list.
            </summary>
      <param name="wordMultiplier">
            The score multiplier to apply to the entire submission.
            </param>
      <remarks>
            This method is asynchronous.
            </remarks>
      <returns>
            An object representing an asynchronous task.
            </returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Gameplay.WordGamePlayer.SubmitWord(Thinksquirrel.WordGameBuilder.WordGameLanguage,System.Single)">
      <summary>
            Submits the word for checking against the specified langauge's word list.
            </summary>
      <param name="language">
            The language to check.
            </param>
      <param name="wordMultiplier">
            The score multiplier to apply to the entire submission.
            </param>
      <remarks>
            This method is asynchronous.
            </remarks>
      <returns>
            An object representing an asynchronous task.
            </returns>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Gameplay.WordGameResult">
      <summary>
            Represents a result from a word game lookup operation (WordChecker methods).
            </summary>
      <remarks>
            Note that this type is passed by value for performance reasons.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameResult.allWords">
      <summary>
            All words returned from the lookup operation.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameResult.hasValue">
      <summary>
            Whether or not the result is empty.
            </summary>
      <remarks>
            This only returns false as a result of an invalid word lookup operation.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameResult.input">
      <summary>
            The input string for the lookup operation.
            </summary>
      <remarks>
            If the input is truncated, this still ruturns the full input string.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameResult.isValid">
      <summary>
            Whether or not the result is valid (at least one word was found).
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameResult.letterTiles">
      <summary>
            A list of the input letter tiles for the lookup operation.
            </summary>
      <remarks>
            If the input is truncated, this still returns all input letter tiles.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameResult.score">
      <summary>
            Gets the score total of the result.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameResult.wasOrdered">
      <summary>
            Whether or not the word lookup was an ordered search.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameResult.word">
      <summary>
            The first word found in the lookup operation. Included for convenience.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Gameplay.WordGameResult.empty">
      <summary>
            Represents an empty WordGameResult.
            </summary>
      <remarks>
            This is only created as a result of an invalid word lookup operation. Assigning a WordGameResult to this value is useful to invalidate previous results.
            </remarks>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Internal.VersionInfo">
      <summary>
            Contains Word Game Builder version information.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Internal.VersionInfo.version">
      <summary>
            Gets the current version of Word Game Builder.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Internal.VersionInfo.isProEdition">
      <summary>
            Whether or not this build of Word Game Builder is the pro edition.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Internal.VersionInfo.isStandardEdition">
      <summary>
            Whether or not this build of Word Game Builder is the standard edition.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Internal.VersionInfo.isPreRelease">
      <summary>
            Whether or not the current Word Game Builder build is a pre-release build.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Internal.VersionInfo.license">
      <summary>
            Gets the current Word Game Builder license, in human-readable form.
            </summary>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Internal.CsvReader">
      <summary>
            A data-reader style interface for reading CSV (and otherwise-char-separated) files.
            </summary>
      <remarks>
            Original CsvReader code (c) Jouni Heikniemi. (http://www.heikniemi.fi/jhlib/)
            "JHLib is free. It is not released under any formal license such as GPL; it's just plainly and simply free.
            You can do whatever you wish with the code; I don't offer support or carry responsibility for anything related to the source or the binaries."
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Internal.CsvReader.#ctor(System.IO.Stream)">
      <summary>
            Creates a new Csv reader for the given stream.
            </summary>
      <param name="s">The stream to read the CSV from.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Internal.CsvReader.#ctor(System.IO.Stream,System.Char)">
      <summary>
            Creates a new reader for the given stream, encoding and separator character.
            </summary>
      <param name="s">The stream to read the data from.</param>
      <param name="separator">The separator character between the fields</param>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Internal.CsvReader.separator">
      <summary>
            The separator character for the fields. Comma for normal CSV.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Internal.CsvReader.GetCsvLine">
      <summary>
            Returns the fields for the next row of data (or null if at eof)
            </summary>
      <returns>A string array of fields or null if at the end of file.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Internal.CsvReader.Dispose">
      <summary>
            Disposes the reader. The underlying stream is closed.
            </summary>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Internal.CsvReaderException">
      <summary>
            Exception class for CsvReader exceptions.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Internal.CsvReaderException.#ctor">
      <summary>
            Constructs a new CsvReaderException.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Internal.CsvReaderException.#ctor(System.String)">
      <summary>
            Constructs a new exception with the given message.
            </summary>
      <param name="message">The exception message.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Internal.CsvReaderException.#ctor(System.String,System.Exception)">
      <summary>
            Constructs a new exception with the given message and the inner exception.
            </summary>
      <param name="message">The exception message.</param>
      <param name="inner">Inner exception that caused this issue.</param>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Internal.CsvWriter">
      <summary>
            A tool class for writing CSV and other char-separated field files.
            </summary>
      <remarks>
            Original CsvReader code (c) Jouni Heikniemi. (http://www.heikniemi.fi/jhlib/)
            "JHLib is free. It is not released under any formal license such as GPL; it's just plainly and simply free.
            You can do whatever you wish with the code; I don't offer support or carry responsibility for anything related to the source or the binaries."
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Internal.CsvWriter.#ctor(System.IO.Stream)">
      <summary>
            Creates a new Csv writer for the given stream.
            </summary>
      <param name="s">The stream to write the CSV to.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Internal.CsvWriter.#ctor(System.IO.Stream,System.Char)">
      <summary>
            Creates a new writer for the given stream and separator character.
            </summary>
      <param name="s">The stream to write the CSV to.</param>
      <param name="separator">The field separator character used.</param>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Internal.CsvWriter.separator">
      <summary>
            The separator character for the fields. Comma for normal CSV.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Internal.UnityEditorBinding.RunStatic(System.String,System.Object[])">
      <summary>
            Run the specified static method with the specified arguments.
            </summary>
      <param name="method">
            The name of the static method in the UnityEditor namespace to run (ex: EditorUtility.DisplayProgressBar)
            </param>
      <param name="arguments">
            The arguments to pass to the method. (optional)
            </param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Internal.UnityEditorBinding.RunInstance(System.Object,System.String,System.Object[])">
      <summary>
            Run the specified instance method with the specified arguments.
            </summary>
      <param name="instance">
            The object to run the method on. (ex: an EditorWindow instance)
            </param>
      <param name="method">
            The name of the instance method in the UnityEditor namespace to run (ex: Repaint)
            </param>
      <param name="arguments">
            The arguments to pass to the method. (optional)
            </param>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile">
      <summary>
            An interface defining a letter tile. Implementations must derive from MonoBehaviour in some form.
            </summary>
      <remarks>
            Any implementation of this interface will work with other Word Game Builder classes. However, it is recommended to use the LetterTile class instead.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile.currentPointValue">
      <summary>
            The current point value of the tile.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile.defaultPointValue">
      <summary>
            The default point value of the tile.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile.currentLetter">
      <summary>
            The current letter represented by the tile.
            </summary>
      <remarks>
            This will get either the default letter or wildcard letter, depending on which one is in use.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile.defaultLetter">
      <summary>
            The default letter represented by the tile.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile.wildcardLetter">
      <summary>
            The wildcard letter represented by the tile.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile.isActive">
      <summary>
            Is the tile currently active (spawned)?
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile.onTileSpawn">
      <summary>
            This event should fire when a tile is spawned or despawned.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile.onTileChange">
      <summary>
            This event should fire when a tile's display should change in any way.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile.ChangeDefaultLetter(Thinksquirrel.WordGameBuilder.Letter)">
      <summary>
            Changes the default letter on a tile.
            </summary>
      <param name="letter">The new default letter to assign to the tile.</param>
      <remarks>
            Changing the default letter will also reset the default score.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile.SetWildcard(Thinksquirrel.WordGameBuilder.Letter)">
      <summary>
            Sets the wildcard letter on a tile.
            </summary>
      <param name="letter">The letter to set as the wildcard letter.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile.SetWildcard(Thinksquirrel.WordGameBuilder.Letter,System.Int32)">
      <summary>
            Sets the wildcard letter on a tile, and changes its score to the specified score.
            </summary>
      <param name="letter">The letter to set as the wildcard letter.</param>
      <param name="score">The score to set for the wildcard tile.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile.RemoveWildcard">
      <summary>
            Remove the wildcard letter on a tile.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile.SpawnTile">
      <summary>
            This should control tile visibility, colliders, and triggers.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile.DespawnTile">
      <summary>
            This should control tile visibility, colliders, and triggers.
            </summary>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTileDisplay">
      <summary>
            An interface defining letter tile colors and labels.
            </summary>
      <remarks>
            Any implementation of this interface will work with other Word Game Builder classes. It is recommended to use the LetterTile class instead.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTileDisplay.currentTextColor">
      <summary>
            The current text color for the tile.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTileDisplay.currentBackgroundColor">
      <summary>
            The current background color for the tile.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTileDisplay.currentLetterLabel">
      <summary>
            The current letter label for the tile.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTileDisplay.currentScoreLabel">
      <summary>
            The current score label for the tile.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTileDisplay.shouldChangeColor">
      <summary>
            Returns true if a tile should change color. This should only be set during change events.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTileDisplay.shouldChangeLabel">
      <summary>
            Returns true if a tile should change any label text. This should only be set during change events.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTileDisplay.shouldAnimate">
      <summary>
            Returns true if a tile should animate. This should only be set during change events.
            </summary>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTileInput">
      <summary>
            An interface defining letter tile input events.
            </summary>
      <remarks>
            Any implementation of this interface will work with other Word Game Builder classes. It is recommended to use the LetterTile class instead.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTileInput.SimulatePressInput(System.Boolean)">
      <summary>
            Simulates a tile press action from user input.
            </summary>
      <param name="isPressed">If <c>true</c>, the tile has just been pressed down. If <c>false</c>, the tile has just been released.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTileInput.SimulateClickInput">
      <summary>
            Simulates a tile click action from user input.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTileInput.SimulateHoverInput(System.Boolean)">
      <summary>
            Simulates a tile hover action from user input.
            </summary>
      <param name="isOver">If <c>true</c>, the user has started hovering over the tile. If <c>false</c>, the tile is no longer being hovered over.</param>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.ObjectModel.IMonoBehaviour">
      <summary>
            An interface representation of a MonoBehaviour.
            </summary>
      <remarks>
            Also includes an additional user data property, that is not used by Word Game Builder.
            Allows easy access to some MonoBehaviour properties and components from an interface.
            \see https://docs.unity3d.com/Documentation/ScriptReference/MonoBehaviour.html
            \see https://docs.unity3d.com/Documentation/ScriptReference/Behaviour.html
            \see https://docs.unity3d.com/Documentation/ScriptReference/Component.html
            \see https://docs.unity3d.com/Documentation/ScriptReference/Object.html
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.IMonoBehaviour.userData">
      <summary>
            Additional user data associated with this object. This is unused by default.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.IMonoBehaviour.enabled">
      <summary>
            Enabled Behaviours are Updated, disabled Behaviours are not.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.IMonoBehaviour.gameObject">
      <summary>
            The game object this component is attached to. A component is always attached to a game object.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.IMonoBehaviour.transform">
      <summary>
            The Transform attached to this GameObject. A component is always attached to a transform.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.IMonoBehaviour.tag">
      <summary>
            The tag of this game object.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.IMonoBehaviour.name">
      <summary>
            The name of the object.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.IMonoBehaviour.hideFlags">
      <summary>
            Should the object be hidden, saved with the scene or modifiable by the user?
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IMonoBehaviour.CancelInvoke">
      <summary>
            Cancels all Invoke calls on this MonoBehaviour.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IMonoBehaviour.Invoke(System.String,System.Single)">
      <summary>
            Invokes the method <c>methodName</c> in <c>time</c> seconds.
            </summary>
      <param name="methodName">The method to invoke.</param>
      <param name="time">The amount of time to wait, in seconds, before invoking the method.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IMonoBehaviour.InvokeRepeating(System.String,System.Single,System.Single)">
      <summary>
            Invokes the method methodName in time seconds.
            </summary>
      <remarks>
            After the first invocation repeats calling that function every <c>repeatRate</c> seconds.
            </remarks>
      <param name="methodName">The method to invoke.</param>
      <param name="time">The amount of time to wait, in seconds, before invoking the method.</param>
      <param name="repeatRate">The amount of time to wait between repeat calls.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IMonoBehaviour.CancelInvoke(System.String)">
      <summary>
            Cancels all Invoke calls with name <c>methodName</c> on this behaviour.
            </summary>
      <param name="methodName">The method to cancel.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IMonoBehaviour.IsInvoking">
      <summary>
            Is any invoke pending on this MonoBehaviour?
            </summary>
      <returns>
        <c>true</c> if the method is invoking, otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IMonoBehaviour.IsInvoking(System.String)">
      <summary>
            Is any invoke on methodName pending?
            </summary>
      <param name="methodName">The method to check.</param>
      <returns>
        <c>true</c> if the method is invoking, otherwise <c>false</c>.
            </returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IMonoBehaviour.StartCoroutine(System.Collections.IEnumerator)">
      <summary>
            Starts a coroutine.
            </summary>
      <param name="routine">The coroutine to start.</param>
      <returns>
            StartCoroutine always returns immediately, however you can yield the result. This will wait until the coroutine has finished execution.
            </returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IMonoBehaviour.StartCoroutine(System.String)">
      <summary>
            Starts a coroutine named methodName.
            </summary>
      <param name="methodName">The method to start.</param>
      <returns>
            StartCoroutine always returns immediately, however you can yield the result. This will wait until the coroutine has finished execution.
            </returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IMonoBehaviour.StartCoroutine(System.String,System.Object)">
      <summary>
            Starts a coroutine named methodName.
            </summary>
      <param name="methodName">The method to check.</param>
      <param name="value">An argument to pass to the method.</param>
      <returns>
            StartCoroutine always returns immediately, however you can yield the result. This will wait until the coroutine has finished execution.
            </returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IMonoBehaviour.StopCoroutine(System.String)">
      <summary>
            Stops all coroutines named methodName running on this behaviour.
            </summary>
      <param name="methodName">The method to stop.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IMonoBehaviour.StopAllCoroutines">
      <summary>
            Stops all coroutines running on this behaviour.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IMonoBehaviour.GetInstanceID">
      <summary>
            Returns the instance id of the object.
            </summary>
      <returns>
            The instance id of this object.
            </returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IMonoBehaviour.ToString">
      <summary>
            Returns the name of the game object.
            </summary>
      <returns>
            The name of the game object.
            </returns>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.ObjectModel.ISelectableLetterTile">
      <summary>
            An interface defining a letter tile that can be selected and deselected. Implementations must derive from MonoBehaviour in some form.
            </summary>
      <remarks>
            Any implementation of this interface will work with other Word Game Builder classes. It is recommended to use the LetterTile class instead.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.ISelectableLetterTile.isSelected">
      <summary>
            Is this tile currently selected?
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.ISelectableLetterTile.onTileSelect">
      <summary>
            This event should fire when a tile is selected or deselected and can be used to override a selection.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ISelectableLetterTile.CanSelectTile(System.Collections.Generic.IList{Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile},System.Boolean@)">
      <summary>
            Returns true if this tile can be selected based on a list of currently selected tiles.
            </summary>
      <param name="tiles">A list representing currently selected tiles.</param>
      <param name="shouldDeselect">If true, this tile should be deselected.</param>
      <returns>
        <c>true</c> if the tile can be selected, otherwise <c>false</c></returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ISelectableLetterTile.CanSelectTile(Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer,System.Boolean@)">
      <summary>
            Returns true if the specified player can select this tile.
            </summary>
      <param name="player">The player to check, to see if this tile can be selected.</param>
      <param name="shouldDeselect">If true, this tile should be deselected.</param>
      <returns>
        <c>true</c> if the tile can be selected, otherwise <c>false</c></returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ISelectableLetterTile.ModifyTileSelection(System.Collections.Generic.IList{Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile})">
      <summary>
            Modifies a list of selected tiles to include/remove the current tile, based on tile selection rules.
            </summary>
      <param name="tiles">A list of tiles to modify.</param>
      <remarks>
            Selecting a tile would add to the list, while deselecting a tile would remove the tile from the list.
            Other tiles may also be modified.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ISelectableLetterTile.SelectTile(System.Collections.Generic.IList{Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile})">
      <summary>
            Selects the tile from a list of currently selected tiles, obeying rules for tile selection.
            </summary>
      <param name="tiles">A list of tiles to modify.</param>
      <returns>
        <c>true</c> if the operation was successful; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ISelectableLetterTile.DeselectTile(System.Collections.Generic.IList{Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile})">
      <summary>
            Deselects the tile from a list of currently selected tiles, obeying rules for tile selection.
            </summary>
      <param name="tiles">A list of tiles to modify.</param>
      <returns>
        <c>true</c> if the operation was successful; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ISelectableLetterTile.SelectTile(Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer)">
      <summary>
            Selects the tile for a player, obeying rules for tile selection.
            </summary>
      <param name="player">The player to check, to see if this tile can be selected.</param>
      <returns>
        <c>true</c> if the operation was successful; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ISelectableLetterTile.DeselectTile(Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer)">
      <summary>
            Deselects the tile for a player, obeying rules for tile selection.
            </summary>
      <param name="player">The player to check, to see if this tile can be deselected.</param>
      <returns>
        <c>true</c> if the operation was successful; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ISelectableLetterTile.ForceSelectTile">
      <summary>
            Selects the tile, ignoring tile selection rules.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ISelectableLetterTile.ForceDeselectTile">
      <summary>
            Deselects the tile, ignoring tile selection rules.
            </summary>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.ObjectModel.ITilePool">
      <summary>
            An interface defining a pool of letter tiles. Implementations must derive from MonoBehaviour in some form.
            </summary>
      <remarks>
            Any implementation of this interface will work with other Word Game Builder classes. However, it is recommended to use the TilePool class instead.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.ITilePool.language">
      <summary>
            The language associated with the tile pool.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.ITilePool.tileDistribution">
      <summary>
            Gets the tile distribution dictionary.
            </summary>
      <remarks>
            This dictionary is only used at runtime. To add or remove from the dictionary in the editor, call the Add and Remove methods on the TilePool class.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.ITilePool.onTileDistribution">
      <summary>
            This event should fire when a tile is distributed from the tile pool.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.ITilePool.lastDistributionCount">
      <summary>
            Gets the last tile distribution count. This value is set before event callbacks.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ITilePool.DistributeTiles(Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer)">
      <summary>
            Distributes the specified amount of tiles to the specified IWordGamePlayer, up to the player's maximum tile count.
            </summary>
      <remarks>
            This automatically removes the tile from the tile pool, and gives them to the player. The tile must still be spawned.
            </remarks>
      <param name="player">The player to distribute tiles to.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ITilePool.DistributeTiles(Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer,System.Int32)">
      <summary>
            Distributes the specified amount of tiles to the specified IWordGamePlayer, up to count or the player's maximum tile count (whichever comes first).
            </summary>
      <remarks>
            This method automatically removes the tile from the tile pool, and gives them to the player. The tile must still be spawned.
            </remarks>
      <see cref="T:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer" />
      <param name="player">The player to distribute tiles to.</param>
      <param name="count">The amount of tiles to attempt to distribute.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ITilePool.DistributeTiles(Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer,Thinksquirrel.WordGameBuilder.Letter,System.Int32)">
      <summary>
            Distributes the specified amount of tiles, with the specified letter, to the specified IWordGamePlayer, up to count or the player's maximum tile count (whichever comes first).
            </summary>
      <remarks>
            This method automatically removes the tile from the tile pool, and gives them to the player. The tile must still be spawned.
            </remarks>
      <see cref="T:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer" />
      <param name="player">The player to distribute tiles to.</param>
      <param name="letter">The letter to distribute.</param>
      <param name="count">The amount of tiles to attempt to distribute.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ITilePool.DistributeTiles(Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer,System.Collections.Generic.IList{Thinksquirrel.WordGameBuilder.Letter})">
      <summary>
            Distributes the specified list of letters to the specified IWordGamePlayer, up to the length of the specified letter list or the player's maximum tile count (whichever comes first).
            </summary>
      <remarks>
            Letters not currently available will NOT be distributed. This method automatically removes the tile from the tile pool, and gives them to the player. The tile must still be spawned.
            </remarks>
      <see cref="T:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer" />
      <param name="player">The player to distribute tiles to.</param>
      <param name="letters">The letters to attempt to distribute.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ITilePool.CreateTilePool">
      <summary>
            Creates the tile pool.
            </summary>
      <remarks>
            This destroys any tiles currently created by the pool (whether it is in the pool or not), and instantiates tile pool objects based on the letter distribution.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ITilePool.ResetTilePool">
      <summary>
            Resets the tile pool.
            </summary>
      <remarks>
            This will despawn all tiles, reshuffle all tiles, and put all tiles that belong to this object back into the pool.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ITilePool.DestroyAllTiles">
      <summary>
            Destroys all tiles that were created by this tile pool (whether it is currently in the pool or not).
            </summary>
      <remarks>
            If a tile's parent object is changed, it will not be destroyed with this method and will become unmanaged by the pool.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ITilePool.Insert(Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile)">
      <summary>
            Inserts a tile into the pool at a random position, if it does not already contain it.
            </summary>
      <param name="item">The tile to insert.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ITilePool.CreateTile(Thinksquirrel.WordGameBuilder.Letter)">
      <summary>
            Spawns a brand new tile into the pool, based on the specified letter.
            </summary>
      <param name="letter">The letter to spawn.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ITilePool.DestroyTile(Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile)">
      <summary>
            Destroys the tile from the scene, if the tile is associated with the pool.
            </summary>
      <remarks>
            This will fully destroy the tile and remove it from any player's possession. Beware - this is a destructive operation in edit mode!
            </remarks>
      <param name="tile">The tile to destroy.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ITilePool.Contains(Thinksquirrel.WordGameBuilder.Letter)">
      <summary>
            Returns true if the tile pool currently contains the specified letter. This method does not look at spawned tiles.
            </summary>
      <param name="letter">The letter to search for.</param>
      <returns>True if the letter exists in the tile pool and is not spawned; otherwise false.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ITilePool.GetOccurances(Thinksquirrel.WordGameBuilder.Letter)">
      <summary>
            Gets the amount of occurances of the specified letter within the tile pool. This method does not look at spawned tiles.
            </summary>
      <returns>The number of occurances of the specified letter.</returns>
      <param name="letter">The letter to search for.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ITilePool.IndexOf(Thinksquirrel.WordGameBuilder.Letter)">
      <summary>
            Determines the index of a specific letter in the ITilePool.
            </summary>
      <returns>The index of item if found in the list; otherwise, -1.</returns>
      <param name="letter">The letter to search for.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.ITilePool.LastIndexOf(Thinksquirrel.WordGameBuilder.Letter)">
      <summary>
            Determines the last index of a specific letter in the ITilePool.
            </summary>
      <returns>The last index of item if found in the list; otherwise, -1.</returns>
      <param name="letter">The letter to search for.</param>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.ObjectModel.IWildcardTileManager">
      <summary>
            An interface defining a manager for selecting wildcard tiles. Implementations must derive from MonoBehaviour in some form.
            </summary>
      <remarks>
            Any implementation of this interface will work with other Word Game Builder classes. However, it is recommended to use the WildcardTileManager class instead.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWildcardTileManager.onWildcardTileSelect">
      <summary>
            This event fires when a blank tile is selected.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IWildcardTileManager.SelectWildcardTile(Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile,Thinksquirrel.WordGameBuilder.WordGameLanguage,Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer)">
      <summary>
            Selects the specified tile as a wildcard with the specified language and player.
            </summary>
      <param name="tile">The tile to use for wildcard selection.</param>
      <param name="lang">The language to use for wildcard selection.</param>
      <param name="player">The player to use for wildcard selection.</param>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGameAgent">
      <summary>
            An interface defining a word game agent. Implementations must derive from MonoBehaviour in some form.
            </summary>
      <remarks>
            Any implementation of this interface will work with other Word Game Builder classes. However, it is recommended to use the WordGameAgent class instead.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGameAgent.onFindWords">
      <summary>
            This event should fire whenever the agent has found a set of words.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGameAgent.lastSearchInfo">
      <summary>
            Gets the most recent search information found from the agent.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGameAgent.FindWords">
      <summary>
            Finds a set of words, based on the player's current held tiles.
            </summary>
      <returns>
            An object representing an asynchronous task.
            </returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGameAgent.FindWords(System.Collections.Generic.IList{Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile})">
      <summary>
            Finds a set of words, based on a list of letter tiles.
            </summary>
      <param name="tiles">A list of letter tiles to use when searching for words.</param>
      <returns>
            An object representing an asynchronous task.
            </returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGameAgent.Stop">
      <summary>
            Stops all actions currently in progress by the agent.
            </summary>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer">
      <summary>
            An interface defining a word game player. Implementations must derive from MonoBehaviour in some form.
            </summary>
      <remarks>
            Any implementation of this interface will work with other Word Game Builder classes. However, it is recommended to use the WordGamePlayer class instead.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.inputEnabled">
      <summary>
            Controls whether or not input has been enabled for this player.
            </summary>
      <remarks>
            It is the responsibilty of the letter tile to check for (or ignore) this value. This is handled automatically by the default LetterTile class.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.maxTiles">
      <summary>
            The maximum amount of tiles that a player should hold.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.orderedWordCheck">
      <summary>
            Should word checks be ordered?
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.multiplyByPermutations">
      <summary>
            If orderedWordCheck = false and multiplyByPermutations = true, the score will be multiplied by the amount of words found.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.score">
      <summary>
            Gets or sets the player's current score.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.highScore">
      <summary>
            Gets the player's high score.
            </summary>
      <remarks>
            Setting this value should automatically set a new high score, if it is higher than the previous high score.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.lastWord">
      <summary>
            Gets the player's last word.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.lastWordScore">
      <summary>
            Gets the score of the player's last word.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.bestWord">
      <summary>
            Gets the player's best word.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.bestWordScore">
      <summary>
            Gets the score of the player's best word.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.heldTiles">
      <summary>
            Gets the list of held tiles.
            </summary>
      <remarks>
            Held tiles are tiles that belong to the player, but will not be submitted.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.selectedTiles">
      <summary>
            Gets a list of the player's play tiles.
            </summary>
      <remarks>
            Play tiles are tiles that will be submitted for checking.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.onWordResult">
      <summary>
            This event should fire whenever a word result is returned from a word check.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.lastResult">
      <summary>
            Gets the last word result. This value should be set before event callbacks.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.ResetAllData">
      <summary>
            Resets all player data, and clears both selected and held tiles.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.ResetAllScores">
      <summary>
            Resets all player scores.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.ResetScore">
      <summary>
            Resets the current score.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.ResetHighScore">
      <summary>
            Resets the high score.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.ResetLastWord">
      <summary>
            Resets the last word.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.ResetBestWord">
      <summary>
            Resets the best word.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.SelectTile(Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile)">
      <summary>
            Attempts to select a tile. If the tile implements ISelectableLetterTile, this follows selection rules.
            </summary>
      <param name="tile">The tile to select.</param>
      <returns>True if the tile was selected; otherwise, false.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.DeselectTile(Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile)">
      <summary>
            Attempts to deselect a tile. If the tile implements ISelectableLetterTile, this follows selection rules.
            </summary>
      <param name="tile">The tile to select.</param>
      <returns>True if the tile was deselected; otherwise, false.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.ClearSelection">
      <summary>
            Clears the player's selected tiles. Also deselected them if they implement ISelectableLetterTile.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer.SubmitWord">
      <summary>
            Submits the word for checking against the current langauge's word list.
            </summary>
      <remarks>
            This method should be asynchronous.
            </remarks>
      <returns>
            An object representing an asynchronous task.
            </returns>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Tiles.LetterTile">
      <summary>
            A standard letter tile. Includes support for selection, wildcard tiles, multiple colors, input, and state querying.
            </summary>
      <remarks>
            Actual display of the letter tiles are handled by other scripts.
            </remarks>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.TileColor">
      <summary>
            Represents a set of colors for a tile. Tiles have both a foreground and background color.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.TileColor.text">
      <summary>
            Gets or sets the text color of the tile.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.TileColor.background">
      <summary>
            Gets or sets the background color of the tile.
            </summary>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.TileStateColorGroup">
      <summary>
            Represents a group of colors for different tile states.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.TileStateColorGroup.normal">
      <summary>
            The colors to display when a tile is in a normal state.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.TileStateColorGroup.hover">
      <summary>
            The colors to display when a tile is hovered.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.TileStateColorGroup.selected">
      <summary>
            The colors to display when a tile is selected.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.TileStateColorGroup.disabled">
      <summary>
            The colors to display when a tile is disabled.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.TileStateColorGroup.selectedAndDisabled">
      <summary>
            The colors to display when a tile is both selected and disabled.
            </summary>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.ColorInfo">
      <summary>
            Represents color information for a letter tile.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.ColorInfo.#ctor">
      <summary>
            Creates a set of color information with the default tile colors.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.ColorInfo.standard">
      <summary>
            Controls how the tile should display colors normally.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.ColorInfo.bonus">
      <summary>
            Controls how the tile should display colors when in bonus mode.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.ColorInfo.penalty">
      <summary>
            Controls how the tile should display colors when in penalty mode.
            </summary>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.SelectionInfo">
      <summary>
            Represents selection information for a letter tile.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.SelectionInfo.wildcardTileManager">
      <summary>
            Gets or sets the current wildcard tile manager, used for selecting wildcard tiles.
            </summary>
      <remarks>
            If there is only one wildcard tile manager in the scene, this value does not have to be set.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.SelectionInfo.selectionMode">
      <summary>
            Controls how the tile is selected.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.SelectionInfo.selectAnyTile">
      <summary>
            If true, any tile can be selected in any order. If false, only tiles within maxDistance of the last tile can be selected.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.SelectionInfo.maxDistance">
      <summary>
            The maximum distance between tiles for selection.
            </summary>
      <remarks>
            If selectAnyTile = false, only tiles within maxDistance of the last tile can be selected.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.SelectionInfo.distanceSpace">
      <summary>
            Controls how distance is calculated (pixel, local, or world space).
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.SelectionInfo.referenceCamera">
      <summary>
            The reference camera for calculating tile distances in pixels. If not set, this defaults to the main camera.
            </summary>
      <remarks>
            This value is ignored if distances are calculated in world space.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.SelectionInfo.processWildcards">
      <summary>
            Whether or not the wildcard tile manager should be ignored when selecting a blank tile.
            </summary>
      <remarks>
            If true, then blank tiles will be selected normally.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.SelectionInfo.AddPlayer(Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer)">
      <summary>
            Adds a player that can select this tile, and that will be affected by a tile's selection.
            </summary>
      <param name="player">The player to add.</param>
      <remarks>
            Letter tiles initialize with all active players by default.
            </remarks>
      <param name="player">The player to add.</param>
      <returns>
        <c>true</c> if the operation was successful, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.SelectionInfo.RemovePlayer(Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer)">
      <summary>
            Removes a player that can select this tile, and that is currently affected by a tile's selection.
            </summary>
      <param name="player">The player to remove.</param>
      <returns>
        <c>true</c> if the operation was successful, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.SelectionInfo.ClearPlayers">
      <summary>
            Clears all players that can select this tile, and that are currently affected by a tile's selection.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.SelectionInfo.AddPlayer(System.String)">
      <summary>
            Adds a player that can select this tile, and that will be affected by a tile's selection (by name).
            </summary>
      <param name="name">The player name to add.</param>
      <returns>
        <c>true</c> if the operation was successful, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.SelectionInfo.ContainsPlayer(Thinksquirrel.WordGameBuilder.ObjectModel.IWordGamePlayer)">
      <summary>
            Checks to see if a player can select this tile, and will affect a tile's selection.
            </summary>
      <param name="player">The player to check.</param>
      <returns>
        <c>true</c> if the player will affect a tile's selection, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.SelectionInfo.ContainsPlayer(System.String)">
      <summary>
            Checks to see if a player can select this tile, and will affect a tile's selection (by name).
            </summary>
      <param name="name">The player name to check.</param>
      <returns>
        <c>true</c> if the player will affect a tile's selection, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.SelectionInfo.GetPlayers">
      <summary>
            Gets all players that can select this tile, and that will be affected by a tile's selection.
            </summary>
      <remarks>
            This allocates a new array.
            </remarks>
      <returns>An array containing all players affected by tile selection.</returns>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.SelectionInfo.AddAllPlayers">
      <summary>
            Adds all active players in the scene to this tile.
            </summary>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.DisplayInfo">
      <summary>
            Controls additional display settings for a letter tile.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.DisplayInfo.showZeroLabel">
      <summary>
            If true, show a label when a tile has a point value of zero.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.DisplayInfo.wildcardPenalty">
      <summary>
            If true, wildcard tiles can have a penalty state.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.DisplayInfo.wildcardBonus">
      <summary>
            If true, wildcard tiles can have a bonus state.
            </summary>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.TweenInfo">
      <summary>
            Controls tween settings for a letter tile.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.TweenInfo.duration">
      <summary>
            Gets or sets the duration of the tween action.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.TweenInfo.delay">
      <summary>
            Gets or sets the delay before performing the tween action.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.TweenInfo.easing">
      <summary>
            Gets or sets the easing of the tween action.
            </summary>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.SelectionMode">
      <summary>
            Controls how a tile is selected.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.SelectionMode.None">
      <summary>
            The tile should never be selected, unless SelectTile is called directly.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.SelectionMode.SelectOnPress">
      <summary>
            The tile should be selected on press events.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.SelectionMode.SelectOnClick">
      <summary>
            The tile should be selected on click events.
            </summary>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.DistanceSpace">
      <summary>
            Controls how a tile's distance is calculated for selection.
            </summary>
      <remarks>
            Distance can be calculated in either pixel, local, or world spcace.
            </remarks>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.DistanceSpace.Pixel">
      <summary>
            Calculate tile distances in pixel space, relative to a reference camera.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.DistanceSpace.Local">
      <summary>
            Calculate tile distances in local space.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.DistanceSpace.World">
      <summary>
            Calculate tile distances in world space.
            </summary>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.LetterTileChange">
      <summary>
            The type of change that invoked a tile change event.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.LetterTileChange.NoChange">
      <summary>
            No change has happened. This will never be set during a tile change event.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.LetterTileChange.Enabled">
      <summary>
            The tile was enabled.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.LetterTileChange.Disabled">
      <summary>
            The tile was disabled.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.LetterTileChange.Selected">
      <summary>
            The tile was selected.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.LetterTileChange.Deselected">
      <summary>
            The tile was deselected.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.LetterTileChange.Hovered">
      <summary>
            The tile was hovered over.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.LetterTileChange.Unhovered">
      <summary>
            The tile is no longer hovered over.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.LetterTileChange.LetterAndScoreChanged">
      <summary>
            Both the letter and score has changed.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.LetterTileChange.ScoreChanged">
      <summary>
            The score has changed.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.LetterTileChange.ColorTweenOnly">
      <summary>
            The tile is currently tweening a color and no other change has happened.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.ILetterTileDisplay.shouldAnimate">
      <summary>
            Returns true if a tile should animate. This is only set during change events.
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTileDisplay.shouldAnimate">shouldAnimate</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.ILetterTileDisplay.shouldChangeLabel">
      <summary>
            Returns true if a tile should change its label. This is only set during change events.
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTileDisplay.shouldChangeLabel">shouldChangeLabel</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.ILetterTileDisplay.shouldChangeColor">
      <summary>
            Returns true if a tile should change color. This is only set during change events.
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTileDisplay.shouldChangeColor">shouldChangeColor</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.currentPointValue">
      <summary>
            The current point value of the tile.
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile.currentPointValue">ILetterTile</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.defaultPointValue">
      <summary>
            The default point value of the tile.
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile.defaultPointValue">ILetterTile</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.defaultLetter">
      <summary>
            The letter represented by the tile.
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile.defaultLetter">ILetterTile</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.wildcardLetter">
      <summary>
            The wildcard letter represented by the tile.
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile.wildcardLetter">ILetterTile</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.currentLetter">
      <summary>
            The current letter represented by the tile.
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile.currentLetter">ILetterTile</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.isActive">
      <summary>
            Is the tile currently active (spawned)?
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile.isActive">ILetterTile</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.onTileSpawn">
      <summary>
            This event fires when a tile is spawned or despawned.
            </summary>
      <remarks>
            Variables set:
            * WGBEvent.currentLanguage
            * WGBEvent.currentLetterTile
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile.onTileSpawn">ILetterTile</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.onTileChange">
      <summary>
            This event fires when a tile has changed.
            </summary>
      <remarks>
            This event will fire if any of the following changes:
            * Tile enabled/disabled
            * Tile selected/deselected
            * Tile hovered/unhovered
            * Tile letter or score changed
            * Tile wildcard letter or score changed
            * Each frame during any color tweening action
            Variables set:
            * WGBEvent.currentLanguage
            * WGBEvent.currentLetterTile
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTile.onTileChange">ILetterTile</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.currentTextColor">
      <summary>
            The current text color for the tile.
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTileDisplay.currentTextColor">ILetterTileDisplay</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.currentBackgroundColor">
      <summary>
            The current background color for the tile.
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTileDisplay.currentBackgroundColor">ILetterTileDisplay</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.currentLetterLabel">
      <summary>
            The current letter label for the tile.
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTileDisplay.currentLetterLabel">ILetterTileDisplay</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.currentScoreLabel">
      <summary>
            The current score label for the tile.
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.ILetterTileDisplay.currentScoreLabel">ILetterTileDisplay</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.currentTextColorRaw">
      <summary>
            The current text color for the tile, in raw form (without tweening).
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.currentBackgroundColorRaw">
      <summary>
            The current background color for the tile, in raw form (without tweening).
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.isSelected">
      <summary>
            Is the current tile selected?
            </summary>
      <remarks>
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.ISelectableLetterTile.isSelected">ISelectableLetterTile</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.onTileSelect">
      <summary>
            This event fires when a tile has been selected or deselected, and can be used to override selection.
            </summary>
      <remarks>
            This event is fired before onTileChange. Overriding a selection will cancel the change event.
            Variables set:
            * WGBEvent.currentLanguage
            * WGBEvent.currentLetterTile
            Implements <see cref="P:Thinksquirrel.WordGameBuilder.ObjectModel.ISelectableLetterTile.onTileSelect">ISelectableLetterTile</see>.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.isOver">
      <summary>
            Is the current tile being hovered over?
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.isBonus">
      <summary>
            Is the current tile in a bonus state (currentPointValue &gt; defaultPointValue)?
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.isPenalty">
      <summary>
            Is the current tile in a penalty state (currentPointValue &lt; defaultPointValue)?
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.isWildcard">
      <summary>
            Is the current tile a wildcard (wildcardLetter.hasValue)?
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.isBlank">
      <summary>
            Is the current tile blank !(letter.hasValue || wildcardLetter.hasValue)?
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.colorInfo">
      <summary>
            Gets or sets the color information.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.wildcardColorInfo">
      <summary>
            Gets or sets the wildcard color information.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.selectionInfo">
      <summary>
            Gets or sets the selection information.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.displayInfo">
      <summary>
            Gets or sets additional display information.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.tweenInfo">
      <summary>
            Gets or sets tweening information.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.currentChange">
      <summary>
            Gets the current change state. This is only set during onTileChange.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.ChangeDefaultLetter(System.String)">
      <summary>
            Changes the letter on a tile, using the specified language.
            </summary>
      <param name="letterString">
            The display text of the letter to change to.
            </param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.ChangeDefaultLetter(System.String,Thinksquirrel.WordGameBuilder.WordGameLanguage)">
      <summary>
            Changes the letter on a tile, using the specified language.
            </summary>
      <param name="letterString">
            The display text of the letter to change to.
            </param>
      <param name="language">
            The language to use.
            </param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.SetPointMultiplier(System.Single)">
      <summary>
            Sets the point multiplier of a letter tile.
            </summary>
      <param name="multiplier">
            The multiplier to apply.
            </param>
      <remarks>
            Changes the currentPointValue.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.ResetPointValue">
      <summary>
            Resets the point value of the tile to the default.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Tiles.LetterTile.SimulateInput">
      <summary>
            Simulates tile selection/deselection event from user input (either a press or a click).
            </summary>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Tiles.LetterTileAnimation">
      <summary>
            Adds animation to a letter tile.
            </summary>
      <remarks>
            This component must be on the same object as a letter tile.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTileAnimation.tileAnimation">
      <summary>
            The animation component to use. If this value is not set, any animation component on this component's GameObject will be used.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTileAnimation.spawnAnimationClip">
      <summary>
            The animation clip to play when a tile spawns.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTileAnimation.enableAnimationClip">
      <summary>
            The animation clip to play when a tile is enabled.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTileAnimation.disableAnimationClip">
      <summary>
            The animation clip to play when a tile is disabled.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTileAnimation.changeAnimationClip">
      <summary>
            The animation clip to play when a tile changes, and its enabled state has not changed.
            </summary>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Tiles.LetterTileColorControl">
      <summary>
            Automatically controls the color of objects based on a letter tile's state.
            </summary>
      <remarks>
            This component must be on the same object as a letter tile.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTileColorControl.background">
      <summary>
            The background objects to control with this component.
            </summary>
      <remarks>
            Accessing this property at runtime may cause new materials/meshes to be instantiated.
            Supported object types:
            * Graphic (color property)
            * SpriteRenderer (color property)
            * TextMesh (color property)
            * GUIText (color property)
            * Renderer (color properties on material)
            * MeshFilter (vertex colors)
            * GameObject (will select the first component)
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTileColorControl.text">
      <summary>
            The text objects to control with this component.
            </summary>
      <remarks>
            Accessing this property at runtime may cause new materials/meshes to be instantiated.
            Supported object types:
            * Graphic (color property)
            * SpriteRenderer (color property)
            * TextMesh (color property)
            * GUIText (color property)
            * Renderer (color properties on material)
            * MeshFilter (vertex colors)
            * GameObject (will select the first component)
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTileColorControl.colorProperties">
      <summary>
            Gets or sets the color properties to change.
            </summary>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Tiles.LetterTileLabelControl">
      <summary>
            Automatically controls the text on objects based on a letter tile's state.
            </summary>
      <remarks>
            This component must be on the same object as a letter tile.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTileLabelControl.letterLabel">
      <summary>
            The letter label.
            </summary>
      <remarks>
            Supported object types:
            * Text
            * TextMesh
            * GUIText
            * GameObject (will select the first component)
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTileLabelControl.scoreLabel">
      <summary>
            The score label.
            </summary>
      <remarks>
            Supported object types:
            * Text
            * TextMesh
            * GUIText
            * GameObject (will select the first component)
            </remarks>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Tiles.LetterTileMouseInput">
      <summary>
            Adds input control to a letter tile, using Unity's OnMouse[...] methods.
            </summary>
      <remarks>
            This component must be on the same object as a letter tile.
            </remarks>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Tiles.LetterTileVisibilityControl">
      <summary>
            Automatically controls the visibility of objects based on a letter tile's state.
            </summary>
      <remarks>
            This component must be on the same object as a letter tile.
            </remarks>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tiles.LetterTileVisibilityControl.objects">
      <summary>
            The objects to toggle when a tile spawns or despawns.
            </summary>
      <remarks>
            Supported object types:
            * Renderer (enabled property)
            * Collider (enabled property)
            * Behaviour (enabled property)
            * GameObject (SetActive method)
            </remarks>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Tiles.UI.LetterTileUIInput">
      <summary>
            Adds input control to a letter tile, using Unity UI's pointer events.
            </summary>
      <remarks>
            This component must be on the same object as a letter tile.
            </remarks>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Tweening.Tweener`1">
      <summary>
            The main tweening class.
            </summary>
      <remarks>
            Provides tween support (with easing) for the following types:
            * float
            * Vector2
            * Vector3
            * Vector4
            * Color
            * Color32
            Tween updates are independent of the current time scale.
            </remarks>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Tweening.Tweener`1.#ctor">
      <summary>
            Creats a new tweener instance.
            </summary>
    </member>
    <member name="E:Thinksquirrel.WordGameBuilder.Tweening.Tweener`1.onTween">
      <summary>
            Occurs every frame while an object is tweening.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tweening.Tweener`1.duration">
      <summary>
            Gets or sets the duration of the tween action.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tweening.Tweener`1.delay">
      <summary>
            Gets or sets the delay before performing the tween action.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tweening.Tweener`1.easing">
      <summary>
            Gets or sets the easing of the tween action.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tweening.Tweener`1.start">
      <summary>
            Gets or sets the initial tween value.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tweening.Tweener`1.end">
      <summary>
            Gets or sets the final tween value.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tweening.Tweener`1.currentValue">
      <summary>
            Gets the current value.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tweening.Tweener`1.startTime">
      <summary>
            Gets the start time for the tween action. Returns -1 when stopped.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tweening.Tweener`1.isEnabled">
      <summary>
            Gets a value indicating whether this tweener is enabled.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tweening.Tweener`1.hasEnded">
      <summary>
            Gets a value indicating whether the current tween action has ended.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tweening.Tweener`1.hasStarted">
      <summary>
            Gets a value indicating whether the current tween action has started.
            </summary>
    </member>
    <member name="P:Thinksquirrel.WordGameBuilder.Tweening.Tweener`1.isDisposed">
      <summary>
            Gets a value indicating whether this tweener has been disposed.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Tweening.Tweener`1.Start(`0)">
      <summary>
            Start a tween action.
            </summary>
      <param name="tweenTo">The value to tween to.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Tweening.Tweener`1.Start(`0,System.Single)">
      <summary>
            Start a tween action.
            </summary>
      <param name="tweenTo">The value to tween to.</param>
      <param name="duration">The duration of the tween action.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Tweening.Tweener`1.Start(`0,System.Single,System.Single,Thinksquirrel.WordGameBuilder.Tweening.Easing)">
      <summary>
            Start a tween action.
            </summary>
      <param name="tweenTo">The value to tween to.</param>
      <param name="duration">The duration of the tween action.</param>
      <param name="delay">The delay before starting the tween action.</param>
      <param name="easing">The easing of the tween action.</param>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Tweening.Tweener`1.Stop">
      <summary>
            Stop any currently running tween action.
            </summary>
    </member>
    <member name="M:Thinksquirrel.WordGameBuilder.Tweening.Tweener`1.Dispose">
      <summary>
            Disposes the tweener object.
            </summary>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.Tweening.Easing">
      <summary>
            Defines various easing equations used for tweening.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.Linear">
      <summary>
            A simple linear tweening, with no easing.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseInQuad">
      <summary>
            A quadratic (t^2) easing in: accelerating from zero velocity.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseOutQuad">
      <summary>
            A quadratic (t^2) easing out: decelerating to zero velocity.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseInOutQuad">
      <summary>
            A quadratic (t^2) easing in/out: acceleration until halfway, then deceleration.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseOutInQuad">
      <summary>
            A quadratic (t^2) easing out/in: deceleration until halfway, then acceleration.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseInCubic">
      <summary>
            A cubic (t^3) easing in: accelerating from zero velocity.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseOutCubic">
      <summary>
            A cubic (t^3) easing out: decelerating from zero velocity.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseInOutCubic">
      <summary>
            A cubic (t^3) easing in/out: acceleration until halfway, then deceleration.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseOutInCubic">
      <summary>
            A cubic (t^3) easing out/in: deceleration until halfway, then acceleration.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseInQuart">
      <summary>
            A quartic (t^4) easing in: accelerating from zero velocity.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseOutQuart">
      <summary>
            A quartic (t^4) easing out: decelerating from zero velocity.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseInOutQuart">
      <summary>
            A quartic (t^4) easing in/out: acceleration until halfway, then deceleration.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseOutInQuart">
      <summary>
            A quartic (t^4) easing out/in: deceleration until halfway, then acceleration.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseInQuint">
      <summary>
            A quintic (t^5) easing in: accelerating from zero velocity.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseOutQuint">
      <summary>
            A quintic (t^5) easing out: decelerating from zero velocity.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseInOutQuint">
      <summary>
            A quintic (t^5) easing in/out: acceleration until halfway, then deceleration.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseOutInQuint">
      <summary>
            A quintic (t^5) easing out/in: deceleration until halfway, then acceleration.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseInSine">
      <summary>
            A sinusoidal (sin(t)) easing in: accelerating from zero velocity.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseOutSine">
      <summary>
            A sinusoidal (sin(t)) easing out: decelerating from zero velocity.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseInOutSine">
      <summary>
            A sinusoidal (sin(t)) easing in/out: acceleration until halfway, then deceleration.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseOutInSine">
      <summary>
            A sinusoidal (sin(t)) easing out/in: deceleration until halfway, then acceleration.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseInExpo">
      <summary>
            An exponential (2^t) easing in: accelerating from zero velocity.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseOutExpo">
      <summary>
            An exponential (2^t) easing out: decelerating from zero velocity.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseInOutExpo">
      <summary>
            An exponential (2^t) easing in/out: acceleration until halfway, then deceleration.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseOutInExpo">
      <summary>
            An exponential (2^t) easing out/in: deceleration until halfway, then acceleration.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseInCirc">
      <summary>
            A circular (sqrt(1-t^2)) easing in: accelerating from zero velocity.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseOutCirc">
      <summary>
            A circular (sqrt(1-t^2)) easing out: decelerating from zero velocity.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseInOutCirc">
      <summary>
            A circular (sqrt(1-t^2)) easing in/out: acceleration until halfway, then deceleration.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseOutInCirc">
      <summary>
            A circular (sqrt(1-t^2)) easing out/in: deceleration until halfway, then acceleration.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseInElastic">
      <summary>
            An elastic (exponentially decaying sine wave) easing in: accelerating from zero velocity.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseOutElastic">
      <summary>
            An elastic (exponentially decaying sine wave) easing out: decelerating from zero velocity.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseInOutElastic">
      <summary>
            An elastic (exponentially decaying sine wave) easing in/out: acceleration until halfway, then deceleration.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseOutInElastic">
      <summary>
            An elastic (exponentially decaying sine wave) easing out/in: deceleration until halfway, then acceleration.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseInBack">
      <summary>
            A back (overshooting cubic easing: (s+1)*t^3 - s*t^2) easing in: accelerating from zero velocity.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseOutBack">
      <summary>
            A back (overshooting cubic easing: (s+1)*t^3 - s*t^2) easing out: decelerating from zero velocity.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseInOutBack">
      <summary>
            A back (overshooting cubic easing: (s+1)*t^3 - s*t^2) easing in/out: acceleration until halfway, then deceleration.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseOutInBack">
      <summary>
            A back (overshooting cubic easing: (s+1)*t^3 - s*t^2) easing out/in: deceleration until halfway, then acceleration.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseInBounce">
      <summary>
            A bounce (exponentially decaying parabolic bounce) easing in: accelerating from zero velocity.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseOutBounce">
      <summary>
            A bounce (exponentially decaying parabolic bounce) easing out: decelerating from zero velocity.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseInOutBounce">
      <summary>
            A bounce (exponentially decaying parabolic bounce) easing in/out: acceleration until halfway, then deceleration.
            </summary>
    </member>
    <member name="F:Thinksquirrel.WordGameBuilder.Tweening.Easing.EaseOutInBounce">
      <summary>
            A bounce (exponentially decaying parabolic bounce) easing out/in: deceleration until halfway, then acceleration.
            </summary>
    </member>
    <member name="T:Thinksquirrel.WordGameBuilder.WGBEventDelegate">
      <summary>
            Word game event delegate, for delegate-based events.
            </summary>
    </member>
  </members>
</doc>